<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Orange Sun - ssh</title><link href="https://potyarkin.ml/" rel="alternate"></link><link href="https://potyarkin.ml/feeds/ssh.atom.xml" rel="self"></link><id>https://potyarkin.ml/</id><updated>2023-07-19T00:00:00+03:00</updated><subtitle>Unsorted ramblings, sometimes related to programming</subtitle><entry><title>Benchmarking ssh-agent performance</title><link href="https://potyarkin.ml/posts/2023/ssh-agent-benchmark/" rel="alternate"></link><published>2023-07-19T00:00:00+03:00</published><updated>2023-07-19T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2023-07-19:/posts/2023/ssh-agent-benchmark/</id><summary type="html">&lt;p&gt;I have an application idea that would require calling ssh-agent rather
frequently - but how many requests per second can it handle?&lt;/p&gt;
&lt;p&gt;To answer this question I wrote a &lt;a href="https://github.com/sio/ssh-agent-benchmark/blob/master/ssh_agent_test.go"&gt;small benchmark&lt;/a&gt; in Go.
It runs a tight loop sending messages for ssh-agent to sign.
Turns out the agent is pretty fast …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have an application idea that would require calling ssh-agent rather
frequently - but how many requests per second can it handle?&lt;/p&gt;
&lt;p&gt;To answer this question I wrote a &lt;a href="https://github.com/sio/ssh-agent-benchmark/blob/master/ssh_agent_test.go"&gt;small benchmark&lt;/a&gt; in Go.
It runs a tight loop sending messages for ssh-agent to sign.
Turns out the agent is pretty fast!&lt;/p&gt;
&lt;p&gt;On a cheap cloud machine it was able to reliably sign more than 500 messages
per second with an ED25519 key. RSA signing was about 4-5 times slower, as
expected.
For a personal heuristic I've decided to remember that ED25519 signatures
cost 2ms and RSA ones 8ms.&lt;/p&gt;
&lt;p&gt;Message size had little effect on throughput because both in ED25519 and in
RSA signatures inputs are hashed with a fast SHA algorithm prior to any other
processing.&lt;/p&gt;
&lt;p&gt;Just in case my random number generator was too slow I checked if it affects
the benchmark results. Tests confirmed that it doesn't.&lt;/p&gt;
&lt;p&gt;Of course, 500 rps does not sound &lt;em&gt;web scale&lt;/em&gt; but for me it's more than
enough. OpenSSH ssh-agent utilizes only a single CPU core, so there is some
potential for performance improvement if you need - but that would mean
doing the signatures in your software. I would rather trust OpenSSH team
(who are known to be just the right amount of paranoid) than touch private key
material with my clumsy hands.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You can run the same tests yourself: clone the &lt;a href="https://github.com/sio/ssh-agent-benchmark"&gt;repo&lt;/a&gt; and execute &lt;code&gt;make&lt;/code&gt; from
top-level directory.
Benchmark names describe the key being used, message size and whether the
message is unique or the same for each iteration. Here is a sample output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;BenchmarkSshAgent/key_ed25519/32B/unique-4          3553      1763363 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_ed25519/32B/same-4            3568      1708270 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_rsa4096/32B/unique-4           778      7824780 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_rsa4096/32B/same-4             763      7657785 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_ed25519/64B/unique-4          3456      1752457 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_ed25519/64B/same-4            3598      1733750 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_rsa4096/64B/unique-4           781      7639828 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_rsa4096/64B/same-4             798      7720210 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_ed25519/256B/unique-4         3549      1735906 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_ed25519/256B/same-4           3417      1722301 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_rsa4096/256B/unique-4          698      7738767 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_rsa4096/256B/same-4            787      7625366 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_ed25519/1024B/unique-4        3555      1703601 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_ed25519/1024B/same-4          3651      1633226 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_rsa4096/1024B/unique-4         805      7542115 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_rsa4096/1024B/same-4           810      7437307 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_ed25519/16384B/unique-4       3205      1935190 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_ed25519/16384B/same-4         3296      1907921 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_rsa4096/16384B/unique-4        783      7624776 ns/op&lt;/span&gt;
&lt;span class="go"&gt;BenchmarkSshAgent/key_rsa4096/16384B/same-4          759      7620548 ns/op&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="ssh"></category><category term="cryptography"></category><category term="benchmark"></category><category term="go"></category><category term="ed25519"></category></entry><entry><title>"No user exists for uid" when pushing to git repo</title><link href="https://potyarkin.ml/posts/2022/no-user-exists-for-uid/" rel="alternate"></link><published>2022-07-21T00:00:00+03:00</published><updated>2022-07-21T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2022-07-21:/posts/2022/no-user-exists-for-uid/</id><summary type="html">&lt;p&gt;Today I tried to automate pushing to a Git repository from a Docker container.
And like many others I failed with an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git push
No user exists for uid 2918
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Today I tried to automate pushing to a Git repository from a Docker container.
And like many others I failed with an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git push
No user exists for uid 2918
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Following best practices I was running the container under a random UID to
drop root privileges, and of course there was no user with that UID in the
system. I don't think that's egregious enough to warrant an error instead
of a warning from &lt;code&gt;git push&lt;/code&gt;, so I've started digging.&lt;/p&gt;
&lt;p&gt;I was very surprised to learn where this error &lt;a href="https://github.com/openssh/openssh-portable/blob/c46f6fed419167c1671e4227459e108036c760f8/ssh.c#L659-L664"&gt;comes from&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * openssh/ssh.c: Main program for the ssh client.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;av&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ...lines omitted...&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* Get user data. */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getpwuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getuid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;logit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No user exists for uid %lu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u_long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;getuid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;getuid()&lt;/code&gt; is pretty self-explanatory, it returns UID of current user.
Afterwards &lt;code&gt;getpwuid()&lt;/code&gt; attempts to fetch data for the provided UID from
&lt;code&gt;/etc/passwd&lt;/code&gt;. It fails, of course, and returns NULL. OpenSSH client treats
that as a show stopper and exits with an error.&lt;/p&gt;
&lt;p&gt;I was hoping that finding the place where error is generated will help me to
come up with a setup that avoids problematic code branch altogether,
but no luck this time. It's straight in the &lt;code&gt;main()&lt;/code&gt; function of ssh client,
no conditional branching whatsoever.&lt;/p&gt;
&lt;p&gt;I will be &lt;a href="https://github.com/sio/microblog-server/blob/1468a8832805f8a72252473020085495d31efcb9/container/addpasswd.c"&gt;looking into generating&lt;/a&gt; a bogus &lt;code&gt;/etc/passwd&lt;/code&gt; entry on-the-fly prior
to launching my application in container. I would very much like to avoid
hardcoding the UID at build time.
&lt;em&gt;(&lt;strong&gt;UPD&lt;/strong&gt;: proper workaround would be to use &lt;a href="https://cwrap.org/nss_wrapper.html"&gt;libnss-wrapper&lt;/a&gt; like &lt;a href="https://github.com/docker-library/postgres/blob/623c00456eab020e203704232c9bd7703ed7ff34/docker-entrypoint.sh#L76-L82"&gt;postgres does&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Meanwhile, here is a punchline for you:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When current UID is not in /etc/passwd OpenSSH client can not even print a
usage message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ssh
No user exists for uid 3432

$ ssh --help
No user exists for uid 3432
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="linux"></category><category term="ssh"></category><category term="git"></category></entry></feed>