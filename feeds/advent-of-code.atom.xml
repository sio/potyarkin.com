<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Orange Sun - advent-of-code</title><link href="https://potyarkin.com/" rel="alternate"></link><link href="https://potyarkin.com/feeds/advent-of-code.atom.xml" rel="self"></link><id>https://potyarkin.com/</id><updated>2024-01-09T00:00:00+03:00</updated><subtitle>Unsorted ramblings, sometimes related to programming</subtitle><entry><title>Declaring bankruptcy on Advent of Purescript 2023</title><link href="https://potyarkin.com/posts/2024/aoc2023-bankruptcy/" rel="alternate"></link><published>2024-01-09T00:00:00+03:00</published><updated>2024-01-09T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.com,2024-01-09:/posts/2024/aoc2023-bankruptcy/</id><summary type="html">&lt;p&gt;Advent of Code is a &lt;a href="https://potyarkin.com/posts/2023/aoc2022/"&gt;fun challenge&lt;/a&gt; and this year I decided to attempt
&lt;a href="https://sio.github.io/advent-of-code/2023/"&gt;solving it in Purescript&lt;/a&gt;. Today I'm declaring this attempt a
failure. This post will serve as a postmortem.&lt;/p&gt;
&lt;h2 id="choosing-purescript"&gt;&lt;a class="toclink" href="#choosing-purescript"&gt;Choosing Purescript&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Last year I solved my first Advent of Code using Go. It was fun and I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Advent of Code is a &lt;a href="https://potyarkin.com/posts/2023/aoc2022/"&gt;fun challenge&lt;/a&gt; and this year I decided to attempt
&lt;a href="https://sio.github.io/advent-of-code/2023/"&gt;solving it in Purescript&lt;/a&gt;. Today I'm declaring this attempt a
failure. This post will serve as a postmortem.&lt;/p&gt;
&lt;h2 id="choosing-purescript"&gt;&lt;a class="toclink" href="#choosing-purescript"&gt;Choosing Purescript&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Last year I solved my first Advent of Code using Go. It was fun and I knew
immediately that I will come back for the next AoC. I also knew that I won't
be solving it using the same language - learning on the go (pun intended)
contributed significantly to my enjoyment of AoC 2022.&lt;/p&gt;
&lt;p&gt;In November 2023 I listened to an &lt;a href="https://corecursive.com/teaching-fp-with-richard-feldman/"&gt;old podcast&lt;/a&gt; where Richard Feldman
evangelises Elm programming language. I got interested and initially decided
to use Elm for the upcoming Advent of Code. While I was learning the basics of
the language I also learned about the ongoing old controversy in Elm community
related to how its BDFL handles communication and development. I decided that
that's too much drama for my liking and that it has too little hope of
resolving anytime soon
- and that it's better to stay away from Elm.&lt;/p&gt;
&lt;p&gt;That's how I ended up with &lt;a href="https://www.purescript.org/"&gt;Purescript&lt;/a&gt;. It was probably the only other
frontend language that offered functional programming with a strong type
system and a &lt;a href="https://github.com/purescript-halogen/purescript-halogen"&gt;nice UI framework&lt;/a&gt;. I hoped that using an
unconventional language would introduce me to frontend development without
dealing with unpleasant Javascript ecosystem.&lt;/p&gt;
&lt;h2 id="learning-purescript"&gt;&lt;a class="toclink" href="#learning-purescript"&gt;Learning Purescript&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My only prior experience with functional programming was Microsoft's Power
Query &lt;a href="https://potyarkin.com/tags/m/"&gt;M language&lt;/a&gt; which is rather narrowly focused on data
processing and is not a general purpose language.&lt;/p&gt;
&lt;p&gt;So, with effectively zero prior knowledge I started learning from &lt;a href="https://book.purescript.org/"&gt;The
Purescript book&lt;/a&gt; but quickly switched to
&lt;a href="https://leanpub.com/fp-made-easier"&gt;Functional Programming Made Easier&lt;/a&gt; by
Charles Scalfani - the former was too fast paced for me.
Scalfani's book was an enjoyable read even if a little too verbose.
I did not follow author's advice to type out and run all code snippets from
the book - that may have contributed to my eventual failure but I don't think
that it was a major factor.&lt;/p&gt;
&lt;h2 id="failing-purescript"&gt;&lt;a class="toclink" href="#failing-purescript"&gt;Failing Purescript&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I enjoyed solving small textbook problems in Purescript. It's a very nice
language. Here are the things I liked most about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Separation of pure and effectful functions&lt;/li&gt;
&lt;li&gt;Fearless refactoring&lt;/li&gt;
&lt;li&gt;Clean and readable syntax&lt;/li&gt;
&lt;li&gt;Pattern matching with exhaustiveness checking&lt;/li&gt;
&lt;li&gt;Function currying, tail call optimisation and other FP niceties&lt;/li&gt;
&lt;li&gt;Type system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had no problems with understanding recursion, currying, pattern matching,
etc. I had relatively little problems with understanding monads and related
concepts.&lt;/p&gt;
&lt;p&gt;My problem was that these nice abstract concepts just did not translate in my
head to applicable programming techniques. Simple practical tasks tripped me
up hard.&lt;/p&gt;
&lt;p&gt;Parsing text was painful. For the first AoC puzzle I decided to &lt;a href="https://github.com/sio/advent-of-code/blob/18c766f757eb71af581ffdeabba056586cf1bd3b/aoc2023/src/Day01/Solve.purs#L137-L147"&gt;tough it out&lt;/a&gt;
with a bespoke char based parser even though I vaguely understood that there
should be a monad based parser combinator library for that. That vague
knowledge was not provided by any of these books, I've picked it up
accidentally from some random blog post on the web.&lt;/p&gt;
&lt;p&gt;For the second AoC day I &lt;a href="https://github.com/sio/advent-of-code/blob/18c766f757eb71af581ffdeabba056586cf1bd3b/aoc2023/src/Day02/Solve.purs#L112-L120"&gt;used the proper library&lt;/a&gt;. It was better but still
felt unnecessarily difficult. When third day's puzzle called for a parser not
based on regular grammar my mind just blanked out. I was loaded up to the brim
with pure theory and I lacked practical knowledge to apply it.&lt;/p&gt;
&lt;p&gt;All this time while I was struggling with text parsing the actual tasks I
picked up Purescript for (frontend experiments and puzzle solving) were
deprioritized to background. I have to commend Purescript and Halogen on this
because if it was anything less than straightforward none of UI and/or puzzle
solutions would get done - I just barely devoted any time to that.&lt;/p&gt;
&lt;p&gt;The project got stalled. I was reluctant to finish the last chapters of
Scalfani's book because I was confident that they won't provide me with
practical knowledge I was lacking. I was hesitant to go web diving for new,
more practical learning materials because I wasn't sure they exist -
Purescript community is rather small, and most learning resources are
enumerated in multiple places. I evaluated those lists the first time I looked.
I probably should've gone looking for more generic functional programming
knowledge - and that would blow my free time budget.&lt;/p&gt;
&lt;p&gt;So I'm just declaring bankruptcy on this project.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;a class="toclink" href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I failed to cowboy my way into Purescript I still got &lt;a href="https://sio.github.io/advent-of-code/2023/"&gt;the
solutions to first two days&lt;/a&gt; of Advent of Code to show off -
all logic executed client side, all UI generated on demand, all type safe and
checked at compile time.&lt;/p&gt;
&lt;p&gt;I could probably pour more effort, practise more, find new learning resources
- and complete the remaining challenges. I'm stubborn enough to see this through.
But my hobby time is not unlimited and there are other projects waiting -
I'm certain I will enjoy some of them more.&lt;/p&gt;</content><category term="posts"></category><category term="programming"></category><category term="purescript"></category><category term="advent-of-code"></category></entry><entry><title>Advent of Code 2022 was fun!</title><link href="https://potyarkin.com/posts/2023/aoc2022/" rel="alternate"></link><published>2023-03-09T00:00:00+03:00</published><updated>2023-03-09T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.com,2023-03-09:/posts/2023/aoc2022/</id><summary type="html">&lt;p&gt;This was the first year I participated in &lt;a href="https://adventofcode.com"&gt;Advent of Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/sio/advent-of-code/tree/master/aoc2022"&gt;&lt;img alt="" src="https://potyarkin.com/resources/aoc2022.svg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case you're not familiar with it, AoC is a Christmas themed programming
competition consisting of 25 challenges published daily (from December 1st to
December 25th). The web site produces personalized puzzle inputs for each user
and expects only …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was the first year I participated in &lt;a href="https://adventofcode.com"&gt;Advent of Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/sio/advent-of-code/tree/master/aoc2022"&gt;&lt;img alt="" src="https://potyarkin.com/resources/aoc2022.svg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case you're not familiar with it, AoC is a Christmas themed programming
competition consisting of 25 challenges published daily (from December 1st to
December 25th). The web site produces personalized puzzle inputs for each user
and expects only the results to be submitted for validation, not full
algorithms. Participants may use any programming language they like.&lt;/p&gt;
&lt;p&gt;I did not compete for global or community &lt;a href="https://adventofcode.com/2022/leaderboard"&gt;leaderboards&lt;/a&gt; - that would be too
high of a pressure to remain fun. Instead I took a self paced approach and
solved puzzles whenever I felt like it - though I've never skipped ahead to
start the next challenge until I was done with the current one.
&lt;a href="https://github.com/sio/advent-of-code/tree/master/aoc2022"&gt;I completed&lt;/a&gt; the first 18 puzzles in December 2022 and finished the
remaining ones in 2023.&lt;/p&gt;
&lt;p&gt;It was very fun!&lt;/p&gt;
&lt;p&gt;For me Advent of Code turned out to be the best computer game I played in
years (though I'm not much of a gamer). Like many games it requires the player
to develop and hone some arbitrary skills but in this case the skills are not
useless outside of the game. In addition to programming (obviously) AoC
tickled parts of my brain responsible for spatial thinking, math and
creativity. I was reminded of how much I enjoyed similarly spirited
math and physics puzzles when I was at school - it's a shame these experiences are
so rare in adult life.&lt;/p&gt;
&lt;p&gt;Roughly since Day 10 I've started taking notes about each puzzle and my
thought process during solving it. I've intended to include them into this
blog post, but I decided against it. There are enough AoC walkthroughs &lt;a href="https://www.google.com/search?q=%22advent+of+code%22+%222022%22+walkthrough"&gt;out
there&lt;/a&gt; already. Here is a condensed list of bullet points from
my notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Advent of Code is fun! Grid puzzles and mazes are very fun, especially 3D
  ones! Tetris... Yummy! Maze on the surface of a cube... Brilliant!&lt;/li&gt;
&lt;li&gt;At some point I've grown tired. It was beginning to feel more like work and
  less like fun. Taking a (long) break here and there has helped to bring 
  the joy back&lt;/li&gt;
&lt;li&gt;Sometimes I got stuck. There is a large online community around Advent of
  Code, so there are a lot of ways to unblock oneself. I did not actively
  engage with any user group in particular, but on one occasion reading Reddit
  comments has helped to push me in the right direction, and on another one
  I've benefited from GitHub's social networking side.&lt;/li&gt;
&lt;li&gt;AoC is a computer game you can continue playing while away from keyboard. A lot of
  good solution ideas have come to me while I was in shower or in a traffic
  jam.&lt;/li&gt;
&lt;li&gt;A couple of times I felt very clever when I solved Part 2 of the puzzle
  before seeing the prompt.&lt;/li&gt;
&lt;li&gt;Off-by-one errors are truly the bane of programmer's existence :-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I solved all 2022's puzzles using Go language. I've picked it up less than a
month before the start of Advent of Code, so I went in expecting to learn a
lot and I was not disappointed. I've grown to appreciate the breadth of Golang
standard library and to love type redefining. All of &lt;a href="https://github.com/sio/advent-of-code/tree/master/aoc2022"&gt;my solutions&lt;/a&gt; use only
the standard library - this happened organically, I did not impose any
restrictions in this regard.&lt;/p&gt;
&lt;p&gt;All in all, Go turned out to be exactly what it has promised: a nice language
with a fast compiler and strict type system. From now on I will choose it over
Python for personal projects.&lt;/p&gt;
&lt;p&gt;Working on these 25 puzzles I've gotten used to always having an extra thread of
thought in background, completely unrelated to personal or work life. Even
though I miss it now, I'm not yet sure if I should dive into AoC puzzles
from previous years. Do they introduce enough variety to tickle my mind in
some new ways or are they just more of the same thing? If I ever decide to
try, I've heard that AoC 2019 IntCode puzzles are good - I'll probably start
with those.&lt;/p&gt;</content><category term="posts"></category><category term="programming"></category><category term="go"></category><category term="advent-of-code"></category></entry></feed>