<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Orange Sun - bash</title><link href="https://potyarkin.com/" rel="alternate"></link><link href="https://potyarkin.com/feeds/bash.atom.xml" rel="self"></link><id>https://potyarkin.com/</id><updated>2019-08-26T00:00:00+03:00</updated><subtitle>Unsorted ramblings, sometimes related to programming</subtitle><entry><title>Cygheap base mismatch in Git for Windows</title><link href="https://potyarkin.com/posts/2019/cygheap-base-mismatch-in-git-for-windows/" rel="alternate"></link><published>2019-08-26T00:00:00+03:00</published><updated>2019-08-26T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.com,2019-08-26:/posts/2019/cygheap-base-mismatch-in-git-for-windows/</id><summary type="html">&lt;p&gt;This error has haunted me for several months:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;4 [main] head (6660) C:\...\usr\bin\head.exe:r
*** fatal error - cygheap base mismatch detected - 0x612C7410/0xAF7410.

This problem is probably due to using incompatible versions of the cygwin DLL.
Search for cygwin1.dll using the Windows Start-&amp;gt;Find/Search facility …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This error has haunted me for several months:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;4 [main] head (6660) C:\...\usr\bin\head.exe:r
*** fatal error - cygheap base mismatch detected - 0x612C7410/0xAF7410.

This problem is probably due to using incompatible versions of the cygwin DLL.
Search for cygwin1.dll using the Windows Start-&amp;gt;Find/Search facility
and delete all but the most recent version.  The most recent version *should*
reside in x:\cygwin\bin, where &amp;#39;x&amp;#39; is the drive on which you have
installed the cygwin distribution.  Rebooting is also suggested if you
are unable to find another cygwin DLL.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The tricky part is I am not even using Cygwin. I'm running bash with Git for
Windows &lt;a href="https://git-scm.com/download/win"&gt;as published at the official website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've tried suggested solution from the error message, googled around quite a
bit, I've even dabbled with Windows Security settings (ASLR) - nothing helped
and have almost made my peace with the fact that every fifth commandline action
will fail loudly.&lt;/p&gt;
&lt;p&gt;And yet after recent release I've decided to try one more time. This time I've
downloaded the portable build for 64-bit architecture, and it worked! I don't
know if it was the fact that I was previously running a 32-bit Git and bash on
64-bit Windows 7 or if Git maintainers have tweaked their build process for 2.23.&lt;/p&gt;
&lt;p&gt;If you're experiencing segmentation faults while running bash from Git for
Windows package, you should check for &lt;strong&gt;architecture mismatch&lt;/strong&gt; with your OS
and/or for &lt;strong&gt;newer (2.23+) Git version&lt;/strong&gt;.&lt;/p&gt;</content><category term="posts"></category><category term="bash"></category><category term="windows"></category><category term="git"></category></entry><entry><title>On dotfiles management</title><link href="https://potyarkin.com/posts/2019/on-dotfiles-management/" rel="alternate"></link><published>2019-07-30T00:00:00+03:00</published><updated>2019-07-30T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.com,2019-07-30:/posts/2019/on-dotfiles-management/</id><summary type="html">&lt;p&gt;This will be yet another description of dotfiles management by some random
person on the Internet. I will try to explain what my setup is like and why it
is that way.&lt;/p&gt;
&lt;p&gt;If you're not yet using version control software for your configuration files
I strongly encourage you to start …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This will be yet another description of dotfiles management by some random
person on the Internet. I will try to explain what my setup is like and why it
is that way.&lt;/p&gt;
&lt;p&gt;If you're not yet using version control software for your configuration files
I strongly encourage you to start doing so, whichever way you like. These
pages are good places to start:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dotfiles.github.io/"&gt;An unofficial guide to dotfiles on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Dotfiles"&gt;Arch wiki article on dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="my-chosen-approach"&gt;&lt;a class="toclink" href="#my-chosen-approach"&gt;My chosen approach&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After several attempts that have spanned across many years I've understood
that neither tracking home directory directly with Git nor symlinking all of
the dotfiles from a single directory tree is working for me. Both ways lead to
a mess in the repository and made the whole endeavor of tracking changes
cognitively expensive, so I inevitably started slacking off.&lt;/p&gt;
&lt;p&gt;I've looked at the existing tools that are meant to automate some of the
process and did not find one that would suit all my needs. I've ended up
writing a small shell &lt;a href="https://gitlab.com/sio/server_common/blob/master/dotfiles/bootstrap.sh"&gt;script&lt;/a&gt; that takes care of dotfiles installation but
the main value for me is in the repo layout, not the script itself.&lt;/p&gt;
&lt;p&gt;All configuration files are grouped into directories by topic. These
directories are somewhat similar to packages in GNU &lt;a href="https://www.gnu.org/software/stow/"&gt;stow&lt;/a&gt;. Topic directories
recreate the directory structure for the target location, by default $HOME.
Files that are meant to be installed into target location have to contain an
appropriate suffix at the end of filename (any other files are ignored):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.copy&lt;/code&gt; - for files to be copied over to new location&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.link&lt;/code&gt; - for files to be linked to from new location&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.append&lt;/code&gt; - for files to be appended to the target file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Default behavior may be altered by a &lt;code&gt;dotfiles.meta&lt;/code&gt; file placed into the
topic directory. It is essentially a shell script that is being sourced during
topic installation. Its main purpose is to provide alternative values for
PREFIX and SCOPE variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PREFIX value determines target directory where the dotfiles will be placed.
  Also if PREFIX is set the dotfiles will not get an extra dot in front of
  their filename (which is the default behavior otherwise).&lt;/li&gt;
&lt;li&gt;SCOPE variable may be used to indicate that a topic requires root privileges
  to be installed (&lt;code&gt;SCOPE=system&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Multiple topics may be installed at once either by providing all of their
names as command line arguments or by listing them all in a text file and
providing path to that file as an argument to the installation &lt;a href="https://gitlab.com/sio/server_common/blob/master/dotfiles/bootstrap.sh"&gt;script&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="examples"&gt;&lt;a class="toclink" href="#examples"&gt;Examples&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;topic-foo/vimrc.link&lt;/code&gt; will be symlinked from &lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topic-bar/bashrc.copy&lt;/code&gt; will be copied over to &lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topic-baz/default/keyboard.copy&lt;/code&gt; with &lt;code&gt;PREFIX=/etc&lt;/code&gt; will be copied to &lt;code&gt;/etc/default/keyboard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topic-baz/file/without/valid/suffix&lt;/code&gt; will be ignored&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More examples may be found in my &lt;a href="https://gitlab.com/sio/server_common/tree/master/dotfiles"&gt;dotfiles repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="comparison-with-existing-tools"&gt;&lt;a class="toclink" href="#comparison-with-existing-tools"&gt;Comparison with existing tools&lt;/a&gt;&lt;/h2&gt;
&lt;h4 id="strengths"&gt;&lt;a class="toclink" href="#strengths"&gt;Strengths&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Very small number of dependencies makes this script usable across all my
  Linux and Windows machines. It requires only the core GNU userland: bash,
  coreutils, find and grep.&lt;/li&gt;
&lt;li&gt;Multiple install actions are supported (copy, link, append) unlike &lt;a href="https://www.gnu.org/software/stow/"&gt;stow&lt;/a&gt;
  that only makes symlinks. More than that, my script detects if it's being
  executed on Windows machine and copies over any file that was meant to be
  symlinked - because symlinks on Windows are so tricky they're might as well
  be not supported at all.&lt;/li&gt;
&lt;li&gt;Destination directory may be specified for each topic individually which
  makes it possible to install topics targeting different directories in one
  run.&lt;/li&gt;
&lt;li&gt;Simple partial deployment. If machine requires only a subset of topics
  tracked in the repository it is easy to list them all in a plain text file
  or to provide them as command line arguments to the bootstrap script.
  &lt;a href="https://thelocehiliosan.github.io/yadm/"&gt;yadm&lt;/a&gt;, for example does not provide such ability.&lt;/li&gt;
&lt;li&gt;Dotfiles are not hidden in the repo by default. It makes no sense to have
  &lt;code&gt;~/.bashrc&lt;/code&gt; point to &lt;code&gt;repo/bash/.bashrc&lt;/code&gt; instead of &lt;code&gt;repo/bash/bashrc&lt;/code&gt;, so
  dots are added automatically for topics with default target PREFIX.&lt;/li&gt;
&lt;li&gt;All operations are reversible because all overwritten files are backed up
  beforehand.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="weaknesses"&gt;&lt;a class="toclink" href="#weaknesses"&gt;Weaknesses&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Single pass execution. It means some topics may be left partially configured
  in case of errors. &lt;a href="https://www.gnu.org/software/stow/"&gt;stow&lt;/a&gt; is a good example of cautious approach. This is an
  implementation detail and may be fixed in later versions of bootstrap
  script.&lt;/li&gt;
&lt;li&gt;No support for tree folding/unfolding. I consider that an overkill for
  simple configuration management.&lt;/li&gt;
&lt;li&gt;No automated reverse operation. In case you want to undo the changes made by
  this &lt;a href="https://gitlab.com/sio/server_common/blob/master/dotfiles/bootstrap.sh"&gt;script&lt;/a&gt; you'll have to restore backups manually from &lt;code&gt;$DOTFILES_BACKUP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"></category><category term="linux"></category><category term="windows"></category><category term="automation"></category><category term="bash"></category></entry><entry><title>Enhanced file path completion in bash (like in zsh)</title><link href="https://potyarkin.com/posts/2018/enhanced-file-path-completion-in-bash-like-in-zsh/" rel="alternate"></link><published>2018-07-14T00:00:00+03:00</published><updated>2018-07-14T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.com,2018-07-14:/posts/2018/enhanced-file-path-completion-in-bash-like-in-zsh/</id><summary type="html">&lt;p&gt;Zsh offers a lot of significant improvements over traditional shell experience.
Some of those can also be implemented in bash, but others are not. For a long
time I've thought that advanced file path expansion is something that can't be
done in bash. Today I prove myself wrong.&lt;/p&gt;
&lt;h2 id="background"&gt;&lt;a class="toclink" href="#background"&gt;Background&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Zsh offers a lot of significant improvements over traditional shell experience.
Some of those can also be implemented in bash, but others are not. For a long
time I've thought that advanced file path expansion is something that can't be
done in bash. Today I prove myself wrong.&lt;/p&gt;
&lt;h2 id="background"&gt;&lt;a class="toclink" href="#background"&gt;Background&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When the Tab key is pressed, zsh expands incomplete file path assuming any of
its elements might be incomplete, while bash expands only the last piece. For
example: &lt;code&gt;cd /u/s/app&amp;lt;Tab&amp;gt;&lt;/code&gt; will produce nothing in bash, but will be expanded
to &lt;code&gt;cd /usr/share/applications&lt;/code&gt; in zsh.&lt;/p&gt;
&lt;p&gt;This feature is a huge time saver, but it does not justify switching the shell
completely (for me). So I've been looking for a way to enable the same behavior
in bash.&lt;/p&gt;
&lt;p&gt;The solution had to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Portable between Linux and Windows (msys);&lt;/li&gt;
&lt;li&gt;Implemented in configuration files or short scripts that can be carried
  around easily. No third-party tools like &lt;code&gt;fzf&lt;/code&gt; that would require system-wide
  installation or other tricks to enable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All I've been able to find was
&lt;a href="https://stackoverflow.com/q/25076611"&gt;this StackOverflow thread&lt;/a&gt;.
Accepted answer suggests using a new bash function that is later bound to Tab
keypress. The function provided is a quick hack that was not tested thoroughly
and has problems with spaces in file path. The author recommends to use his
function along with the default completer, not instead of it, so it was not
what I needed.&lt;/p&gt;
&lt;h2 id="workaround"&gt;&lt;a class="toclink" href="#workaround"&gt;Workaround&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Typing &lt;code&gt;cd /u*/s*/app*&amp;lt;Tab&amp;gt;&lt;/code&gt; is somewhat better but not as streamlined an
experience as the one zsh offers.&lt;/p&gt;
&lt;p&gt;This turned out to be an inspiration for the proper completer function though.&lt;/p&gt;
&lt;h2 id="better-solution"&gt;&lt;a class="toclink" href="#better-solution"&gt;Better solution&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have coded a small function that adds wildcards to each element in the path
and executes normal bash completion procedures with modified input. After a bit
of documentation digging I've been able to inject this function into normal
bash completion process. I'm pretty happy with path expansion now.&lt;/p&gt;
&lt;p&gt;To enable the described behavior source &lt;a href="https://github.com/sio/bash-complete-partial-path/blob/master/bash_completion"&gt;&lt;strong&gt;this file&lt;/strong&gt;&lt;/a&gt; from your
~/.bashrc and run &lt;code&gt;_bcpp --defaults&lt;/code&gt;. Supported features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Special characters in completed path are automatically escaped if present&lt;/li&gt;
&lt;li&gt;Tilde expressions are properly expanded (as per &lt;a href="https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html"&gt;bash documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;If user had started writing the path in quotes, no character escaping is
  applied. Instead the quote is closed with a matching character after expanding
  the path.&lt;/li&gt;
&lt;li&gt;If &lt;a href="https://salsa.debian.org/debian/bash-completion"&gt;bash-completion&lt;/a&gt; package is already in use, this code will safely override
  its &lt;code&gt;_filedir&lt;/code&gt; function. No extra configuration is required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Watch a demo screencast to see this feature in action:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/0zhzOYbkF22pWLmbx1RHCYyqQ"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/0zhzOYbkF22pWLmbx1RHCYyqQ.png"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="posts"></category><category term="bash"></category><category term="gist"></category></entry><entry><title>Execute the same git subcommand in all local repositories</title><link href="https://potyarkin.com/posts/2017/execute-the-same-git-subcommand-in-all-local-repositories/" rel="alternate"></link><published>2017-10-05T15:40:00+03:00</published><updated>2017-10-05T15:40:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.com,2017-10-05:/posts/2017/execute-the-same-git-subcommand-in-all-local-repositories/</id><summary type="html">&lt;p&gt;If you work with more than one git project simultaneously, you often need to
do the same maintenance tasks in each cloned repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check if there are some changes waiting to be pushed,&lt;/li&gt;
&lt;li&gt;check remote URLs for all repos (e.g. when considering to switch from HTTPS
  authentication with GitHub …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;If you work with more than one git project simultaneously, you often need to
do the same maintenance tasks in each cloned repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check if there are some changes waiting to be pushed,&lt;/li&gt;
&lt;li&gt;check remote URLs for all repos (e.g. when considering to switch from HTTPS
  authentication with GitHub to using SSH keys),&lt;/li&gt;
&lt;li&gt;view last commit messages to refresh your memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doing so with standard tools would involve a lot of &lt;code&gt;cd&lt;/code&gt;-ing, and the
inconvenience would deter you from checking all repos frequently.&lt;/p&gt;
&lt;p&gt;That's why I wrote a simple bash script that helps to &lt;em&gt;automate the boring
stuff&lt;/em&gt;. The script is well-documented, so I won't discuss implementation
details here.&lt;/p&gt;
&lt;h2 id="git-projectssh"&gt;&lt;a class="toclink" href="#git-projectssh"&gt;git-projects.sh&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can download the script from
&lt;a href="https://gist.github.com/sio/227da259cad7bb549c69909ba428884c"&gt;https://gist.github.com/sio/...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code is licensed under a permissive opensource license (Apache License,
Version 2.0) so feel free to use it for your hobby and work projects.&lt;/p&gt;
&lt;p&gt;Report any bugs, ideas, feature requests via GitHub issues/comments -
all feedback is welcome!&lt;/p&gt;
&lt;h2 id="installation"&gt;&lt;a class="toclink" href="#installation"&gt;Installation&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download the script from GitHub, add execution permissions&lt;/li&gt;
&lt;li&gt;List the paths to the local clones of your git repos in a text
  file (one path per line). If you're using relative paths they must
  be valid relative to the location of the script&lt;/li&gt;
&lt;li&gt;Update the value of &lt;code&gt;PROJECT_LIST&lt;/code&gt; variable with the path of the file
  you've just created&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="usage"&gt;&lt;a class="toclink" href="#usage"&gt;Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All command-line parameters are passed on to the &lt;code&gt;git&lt;/code&gt; command.
When the script is launched without parameters, &lt;code&gt;git-projects.sh&lt;/code&gt; checks the
status of each repo.&lt;/p&gt;
&lt;p&gt;Repositories are processed in alphabetical order sorted by paths
listed in &lt;code&gt;PROJECT_LIST&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="examples"&gt;&lt;a class="toclink" href="#examples"&gt;Examples&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="refreshing-your-memory"&gt;&lt;a class="toclink" href="#refreshing-your-memory"&gt;Refreshing your memory&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;./git-projects.sh&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;--oneline&lt;span class="w"&gt; &lt;/span&gt;-3&lt;span class="w"&gt; &lt;/span&gt;--no-decorate

HomeLibraryCatalog
b5808f6&lt;span class="w"&gt; &lt;/span&gt;Always&lt;span class="w"&gt; &lt;/span&gt;check&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;db&lt;span class="w"&gt; &lt;/span&gt;before&lt;span class="w"&gt; &lt;/span&gt;showing&lt;span class="w"&gt; &lt;/span&gt;first&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;page
72d2481&lt;span class="w"&gt; &lt;/span&gt;Remove&lt;span class="w"&gt; &lt;/span&gt;/quit&lt;span class="w"&gt; &lt;/span&gt;route
75c707b&lt;span class="w"&gt; &lt;/span&gt;Clean&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;destructors&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;WebUI&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;CatalogueDB

OpenShiftApp
b260276&lt;span class="w"&gt; &lt;/span&gt;Deploy&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;GitHub
05e0206&lt;span class="w"&gt; &lt;/span&gt;Deploy&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;GitHub
54e5cf1&lt;span class="w"&gt; &lt;/span&gt;Deploy&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;GitHub

server_common
bc33836&lt;span class="w"&gt; &lt;/span&gt;Indentation&lt;span class="w"&gt; &lt;/span&gt;rule&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Makefiles
72fb92a&lt;span class="w"&gt; &lt;/span&gt;Use&lt;span class="w"&gt; &lt;/span&gt;proper&lt;span class="w"&gt; &lt;/span&gt;syntax&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;TODO&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;GitHub&lt;span class="w"&gt; &lt;/span&gt;Flavored&lt;span class="w"&gt; &lt;/span&gt;Markdown
a24e4f2&lt;span class="w"&gt; &lt;/span&gt;More&lt;span class="w"&gt; &lt;/span&gt;familiar&lt;span class="w"&gt; &lt;/span&gt;Home&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;Backspace&lt;span class="w"&gt; &lt;/span&gt;behavior
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="view-latest-tag-if-any"&gt;&lt;a class="toclink" href="#view-latest-tag-if-any"&gt;View latest tag (if any)&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;./git-projects.sh&lt;span class="w"&gt; &lt;/span&gt;describe&lt;span class="w"&gt; &lt;/span&gt;--tags&lt;span class="w"&gt; &lt;/span&gt;--always

HomeLibraryCatalog
v0.1.0-71-gb5808f6

OpenShiftApp
b260276

server_common
bc33836
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="checking-project-status"&gt;&lt;a class="toclink" href="#checking-project-status"&gt;Checking project status&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;./git-projects.sh

HomeLibraryCatalog
On&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;master
Your&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;up-to-date&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

nothing&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;commit,&lt;span class="w"&gt; &lt;/span&gt;working&lt;span class="w"&gt; &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;clean

OpenShiftApp
On&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;master
Your&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;up-to-date&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

nothing&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;commit,&lt;span class="w"&gt; &lt;/span&gt;working&lt;span class="w"&gt; &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;clean

server_common
On&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;master
Your&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;up-to-date&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

nothing&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;commit,&lt;span class="w"&gt; &lt;/span&gt;working&lt;span class="w"&gt; &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="bash"></category><category term="script"></category><category term="gist"></category></entry></feed>