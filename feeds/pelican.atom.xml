<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Orange Sun - pelican</title><link href="https://potyarkin.ml/" rel="alternate"></link><link href="https://potyarkin.ml/feeds/pelican.atom.xml" rel="self"></link><id>https://potyarkin.ml/</id><updated>2022-06-10T00:00:00+03:00</updated><subtitle>Unsorted ramblings, sometimes related to programming</subtitle><entry><title>Pip-installable Pelican themes</title><link href="https://potyarkin.ml/posts/2022/pip-install-pelican-theme/" rel="alternate"></link><published>2022-06-10T00:00:00+03:00</published><updated>2022-06-10T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2022-06-10:/posts/2022/pip-install-pelican-theme/</id><summary type="html">&lt;p&gt;Installing &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; themes &lt;a href="https://docs.getpelican.com/en/3.6.3/pelican-themes.html#installing-themes"&gt;the default way&lt;/a&gt; is not very
pleasant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to invoke a separate CLI tool&lt;/li&gt;
&lt;li&gt;You may need to create some symlinks and ensure that they don't go stale the
  next time you use Pelican&lt;/li&gt;
&lt;li&gt;Some people (me) have resorted to git submodules instead of official CLI â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Installing &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; themes &lt;a href="https://docs.getpelican.com/en/3.6.3/pelican-themes.html#installing-themes"&gt;the default way&lt;/a&gt; is not very
pleasant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to invoke a separate CLI tool&lt;/li&gt;
&lt;li&gt;You may need to create some symlinks and ensure that they don't go stale the
  next time you use Pelican&lt;/li&gt;
&lt;li&gt;Some people (me) have resorted to git submodules instead of official CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a workaround I've been packaging my Pelican themes into simple Python
packages with a sole &lt;code&gt;__init__.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pkg_resources&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;resource_filename&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Return path to theme templates and assets&lt;/span&gt;
&lt;span class="sd"&gt;    Use this value for THEME in Pelican settings&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resource_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This adds a dependency on &lt;a href="https://setuptools.pypa.io/en/latest/userguide/index.html"&gt;setuptools&lt;/a&gt; but it's already present in most
Python venvs anyways, so not a big deal.
&lt;code&gt;pkg_resources&lt;/code&gt; exposes full path to wherever pip installs the theme. It
also handles unpacking to temporary directory if required (in case of wheels and
zipped installs).&lt;/p&gt;
&lt;p&gt;I have been using this trick for some time already, but only recently I noticed
that Pelican plugins have &lt;a href="https://docs.getpelican.com/en/stable/plugins.html#namespace-plugin-structure"&gt;officially transitioned&lt;/a&gt; to
being pip-installable. They use a clever hack of adding extra packages to
&lt;code&gt;pelican.plugins&lt;/code&gt; namespace and I though it would be cool to use the same
approach with themes.&lt;/p&gt;
&lt;p&gt;Turns out it's not easy to do with setuptools, but is &lt;a href="https://github.com/sio/pelican-smallweb/blob/master/pyproject.toml"&gt;pretty
straightforward&lt;/a&gt; with poetry. As a result I can now publish &lt;a href="https://pypi.org/project/pelican-theme-smallweb/"&gt;my
themes&lt;/a&gt; to PyPI and provide easy invocation instructions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# pelicanconf.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican.themes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;smallweb&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallweb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All the end users need to do is to add another line mentioning my theme to
whichever &lt;a href="https://github.com/sio/potyarkin.ml/blob/smallweb/requirements.txt#L3"&gt;file they use&lt;/a&gt; to create their Pelican venv.&lt;/p&gt;
&lt;p&gt;On developer side we need to create &lt;code&gt;pelican/themes/themename&lt;/code&gt; folder
structure and point poetry at &lt;code&gt;pelican&lt;/code&gt; for top-level package name. All theme
files should be placed into &lt;code&gt;pelican/themes/themename&lt;/code&gt; and one extra
&lt;code&gt;__init__.py&lt;/code&gt; file should be added there to provide &lt;code&gt;path()&lt;/code&gt; method.
See &lt;a href="https://github.com/sio/pelican-smallweb"&gt;SmallWeb&lt;/a&gt; repository for an example.&lt;/p&gt;</content><category term="posts"></category><category term="pelican"></category><category term="python"></category><category term="pip"></category></entry></feed>