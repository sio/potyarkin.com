<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Orange Sun</title><link href="https://potyarkin.ml/" rel="alternate"></link><link href="https://potyarkin.ml/feeds/all.atom.xml" rel="self"></link><id>https://potyarkin.ml/</id><updated>2018-06-26T00:00:00+03:00</updated><entry><title>Liberating effect of Ansible</title><link href="https://potyarkin.ml/posts/2018/liberating-effect-of-ansible/" rel="alternate"></link><published>2018-06-26T00:00:00+03:00</published><updated>2018-06-26T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-06-26:/posts/2018/liberating-effect-of-ansible/</id><summary type="html">&lt;p&gt;Maintaining two or three Linux machines is not that hard of a task. For many
years I have thought it was not worth the effort to automate - regular backups
and version-controlled configuration files seemed to be just enough.&lt;/p&gt;
&lt;p&gt;And then Ansible had blown my mind.&lt;/p&gt;
&lt;h2 id="history"&gt;&lt;a class="toclink" href="#history"&gt;History&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It all started with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Maintaining two or three Linux machines is not that hard of a task. For many
years I have thought it was not worth the effort to automate - regular backups
and version-controlled configuration files seemed to be just enough.&lt;/p&gt;
&lt;p&gt;And then Ansible had blown my mind.&lt;/p&gt;
&lt;h2 id="history"&gt;&lt;a class="toclink" href="#history"&gt;History&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It all started with a web server and a series of subpar hosting providers.
Setting that server up for the first time was an adventure. Repeating the setup
for the first relocation has given me a chance to introduce some improvements
but was otherwise uneventful. I started dreading the process when the need for
the third iteration had arisen. I was willing to put up with sluggishness and
several short downtimes just to delay the move to a new server. That was not OK.&lt;/p&gt;
&lt;p&gt;Automating has clearly become a worthwhile task. I chose Ansible because it
doesn't require any special software on the controlled machines and because it
is mature enough to remain backwards compatible after updates. There are
numerous reviews of pros and cons of different configuration management systems,
but that's outside the scope of this article.&lt;/p&gt;
&lt;h2 id="unexpected-outcome"&gt;&lt;a class="toclink" href="#unexpected-outcome"&gt;Unexpected outcome&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ansible has definitely succeeded at the task I've thrown it at. That was
expected. What I couldn't foresee is how this experience would affect my
mindset - it was like a breath of fresh air! I have suddenly started to
understand why there exists all the buzz around &lt;em&gt;the cloud&lt;/em&gt; and why cloud
service providers are dominating the market of virtual servers.&lt;/p&gt;
&lt;h3 id="certainty"&gt;&lt;a class="toclink" href="#certainty"&gt;Certainty&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With my Ansible playbook I did not just automate the setup process, I created an
enforceable specification of what my server has to be like. At any time in the
future after executing the same playbook I can be certain that all configurable
parameters will be at the values I've defined.&lt;/p&gt;
&lt;p&gt;Idempotent behavior allows me to run the playbook again and again without fear
of breaking anything. It should be noted though, that not all Ansible modules
are idempotent and one should always check the documentation before
incorporating a new module into the playbook.&lt;/p&gt;
&lt;h3 id="immutability"&gt;&lt;a class="toclink" href="#immutability"&gt;Immutability&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is even an option to take it one step further to truly &lt;a href="https://www.digitalocean.com/community/tutorials/what-is-immutable-infrastructure"&gt;immutable
infrastructure&lt;/a&gt; where any server can die at any point and no harm will be done.
This approach is for a bigger scale than a humble hobby project, though.&lt;/p&gt;
&lt;p&gt;I have limited the immutability effort to a gentle reminder in /etc/motd and a
policy among administrators (me, myself and I) that no configuration changes are
to be made via shell connection.&lt;/p&gt;
&lt;h3 id="disposability"&gt;&lt;a class="toclink" href="#disposability"&gt;Disposability&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now it is incredibly easy for me to replicate that web server. It requires only
one command and a short coffee break. That means I can switch the hosting
provider at any moment I want. Choosing the hosting company has become a
non-issue: I invest only a minimal payment and no labor at all. If I don't like
what I get I'll be gone in no time.&lt;/p&gt;
&lt;p&gt;Easy replication also means I can fire up another server for testing purposes,
then destroy it in a couple of hours and it will cost me only a few cents
because of hourly billing that most providers offer nowadays.&lt;/p&gt;
&lt;h3 id="emotional-detachment"&gt;&lt;a class="toclink" href="#emotional-detachment"&gt;Emotional detachment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Setting up a new server used to be somewhat similar to moving into a new
apartment.  First, there was scrupulous comparing of offers, after that a
dramatic moment of signing the lease and then the silent minutes alone in empty
apartment, staring at the walls. Each server was important and loved, breaking
or destroying it on purpose was unthinkable.&lt;/p&gt;
&lt;p&gt;Now it's more like checking into a room at the hotel. And you get to be a
celebrity and send the rider list in advance, so that everything is set up to
your liking when you arrive. You can also check out at any moment without
worrying about the lease. There is no need to lug your favorite vimrc along
because you won't be editing anything there, in fact you'll hardly ever spend
any time logged in at all.&lt;/p&gt;
&lt;p&gt;Randy Bias has summed this attitude in the &lt;a href="http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/"&gt;pets versus cattle&lt;/a&gt; analogy. I think
it's quite on point even when you're managing a single machine, not the fleet of
servers.&lt;/p&gt;
&lt;h3 id="infrastructure-as-code"&gt;&lt;a class="toclink" href="#infrastructure-as-code"&gt;Infrastructure as code&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And last, but not least, all you do with Ansible is automatically documented in
the playbook. You can use any version control system to track when any
particular change was introduced and why. That allows to revert the unwanted
changes as easily as was introducing them in the first place.&lt;/p&gt;
&lt;h2 id="afterword"&gt;&lt;a class="toclink" href="#afterword"&gt;Afterword&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When you're outside the professional IT crowd it is not obvious that the cloud
infrastructure and the corresponding tools are within the reach of hobbyist
enthusiasts. But they are and they offer just as much value for personal
projects as they do in production environment.&lt;/p&gt;
&lt;p&gt;If you find yourself tinkering with Linux administration more than once a week
it'll be worthwhile to try out Ansible or some other configuration management
tool.&lt;/p&gt;</content><category term="ansible"></category><category term="web"></category><category term="server"></category><category term="automation"></category></entry><entry><title>Accidental submersion into web development</title><link href="https://potyarkin.ml/posts/2018/accidental-submersion-into-web-development/" rel="alternate"></link><published>2018-06-16T00:00:00+03:00</published><updated>2018-06-16T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-06-16:/posts/2018/accidental-submersion-into-web-development/</id><summary type="html">&lt;h2 id="the-library-problem"&gt;&lt;a class="toclink" href="#the-library-problem"&gt;The Library Problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I love reading books. My wife loves reading books. We enjoy shopping for books
and we live a ten minute commute away from a huge used books store. That means
we have a lot of books. Like, really a lot. A little more than one thousand.&lt;/p&gt;
&lt;p&gt;We …&lt;/p&gt;</summary><content type="html">&lt;h2 id="the-library-problem"&gt;&lt;a class="toclink" href="#the-library-problem"&gt;The Library Problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I love reading books. My wife loves reading books. We enjoy shopping for books
and we live a ten minute commute away from a huge used books store. That means
we have a lot of books. Like, really a lot. A little more than one thousand.&lt;/p&gt;
&lt;p&gt;We have lost count how many times we've bought a book that we already owned.
Even more often we had foregone buying a book we liked because we were sure we
have already bought it - only to find out we've been mistaken and have only
considered buying that very book earlier. This has become a problem. The Library
Problem.&lt;/p&gt;
&lt;p&gt;We needed a way to catalog all our books. The catalog had to be accessible from
mobile devices (to look up a book while at the book store) and to be easy to
use. That is to add and edit book information, of which we've needed plenty: in
addition to standard set of author, title and publishing year we wanted to be
able to track book series and keep the list of missing books to look out for the
next time.&lt;/p&gt;
&lt;p&gt;I admit that my research into the subject matter was not scientifically thorough.
I've dug up several comparisons of existing tools and have read several blog
posts of people who have faced the same problem before. I particularly recommend
&lt;a href="http://www.zackgrossbart.com/hackito/the-library-problem/"&gt;this one&lt;/a&gt;. And I have decided that no pre-existing tool will meet our
growing expectations.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-library-problem"&gt;The Library Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#naive-foray-into-application-architecture"&gt;Naive foray into application architecture&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#single-spreadsheet-approach"&gt;Single spreadsheet approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-database-driven-application-with-web-interface"&gt;Local database driven application with web interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#traditional-web-application"&gt;Traditional web application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-unknown-unknowns"&gt;The unknown unknowns&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#orm"&gt;ORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multi-threading"&gt;Multi-threading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-migrations"&gt;Database migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript-is-a-lot-of-work"&gt;JavaScript is a lot of work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modular-design"&gt;Modular design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mvc"&gt;MVC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#it-works"&gt;It works!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="naive-foray-into-application-architecture"&gt;&lt;a class="toclink" href="#naive-foray-into-application-architecture"&gt;Naive foray into application architecture&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have never developed an application for any end user other than myself and I
didn't even know I was about to start developing one.&lt;/p&gt;
&lt;h3 id="single-spreadsheet-approach"&gt;&lt;a class="toclink" href="#single-spreadsheet-approach"&gt;Single spreadsheet approach&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The initial idea was that of a "document". It had to contain some essential
information about every book we own and (optionally) a second list of books we
want to acquire. Excel spreadsheet seemed like a natural fit. We are both
spending a better half of each workday juggling spreadsheets in Excel, so
developing and maintaining such "document" appeared doable.&lt;/p&gt;
&lt;p&gt;I have started drafting the column structure, applied some formatting tweaks and
the skeleton of the "document" was ready. We have entered the test batch of
books and were about to begin testing.&lt;/p&gt;
&lt;p&gt;Obstacles arose when we were entering information for the first fifteen books.
Manually typing in all the fields is tiresome and slow. Errors inevitably
happen. What if I miss one letter in the author's name?  That book will be lost
when applying filter on author column. We need autocompletion! What if I
accidentally switch the order of digits in ISBN? We won't be able to do a web
lookup for that book later. We have to write a custom ISBN validator in VBA!&lt;/p&gt;
&lt;p&gt;And the spreadsheet began to amass VBA code, data validation and conditional
formatting rules. Full-blown spaghetti style. Version control has become a
problem. What's the difference between versions 0.0.13 and 0.0.19? I had only a
vague idea.&lt;/p&gt;
&lt;p&gt;I stopped myself when I was about to sketch up a UserForm for data input. Excel
road was leading me nowhere. It was difficult and even if all the difficulties
were to be overcome it imposed some suboptimal compromises on us:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single table storage limited the data structures we would be able to enter and
  view. If the book was written by two authors, which one should come first in
  the "author" string?  How would we do column filtering in that case? What
  about sort order?&lt;/li&gt;
&lt;li&gt;The local nature of storage meant there had to be one designated place for
  making changes (home laptop). Any changes made in other locations (smartphone,
  thumb drive) had to be agreed to be declared discardable.&lt;/li&gt;
&lt;li&gt;The spreadsheet had to be exported to HTML to be accessible from smartphones.
  XML and XSLT made this possible but not very pleasant. Although, I am rather
  proud of the VBA code I wrote to save/load XML data automatically upon opening
  the workbook. The data was completely decoupled from the representation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm glad I did not waste more time pursuing this path, but it was still hard to
let go. It took quite some time for me to return to this project afterwards.&lt;/p&gt;
&lt;h3 id="local-database-driven-application-with-web-interface"&gt;&lt;a class="toclink" href="#local-database-driven-application-with-web-interface"&gt;Local database driven application with web interface&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A relational database was the logical solution to spreadsheet limitations.
Store authors separate from books and manage how the former &lt;em&gt;relate&lt;/em&gt; to the
latter! Scientists who pioneered the &lt;a href="https://en.wikipedia.org/wiki/Relational_model#History"&gt;relational model&lt;/a&gt; in 1970s were pure
geniuses and now the whole world relies on their work.&lt;/p&gt;
&lt;p&gt;I drafted the database schema on a piece of paper and have discussed it
extensively with my wife. That's probably the point where book reviews were
added to the requirements list. The database idea made me very enthusiastic and
had swallowed a lot of free time, but that idea alone could not provide a
complete solution for the problem at hand.&lt;/p&gt;
&lt;p&gt;Data input and representation are what the Library project was all about. Yet
relational database management systems provide only the storage solution, not
the full package (if you don't take Microsoft Access into account). So I had to
figure out how to implement the user interface on my own. I chose to write it in
Python because I was somewhat familiar with the language and I enjoy how clean
and readable Python code is. I'm not a programmer, so other options were either
learning a new language or choosing between VBA and Bash, none of which could be
considered enjoyable.&lt;/p&gt;
&lt;p&gt;I have briefly considered building a conventional desktop GUI. The UserForm
experience was still fresh and rather traumatic, so I was reluctant to dive into
another UI toolkit. Even if I were to, which one should I have chosen? Qt seemed
nice, but its Python support reports were contradictory. GTK? Installing it was
rather tricky in Windows. Something non-crossplatform? And what about my Linux
laptop?&lt;/p&gt;
&lt;p&gt;I've had a bunch of HTML templates left from XML/XSLT operations and they could
be trivially transformed to be used in conjunction with the database. While the
catalog pages could be statically generated, the data input required some sort
of server to interact with. And I've had zero experience with that.&lt;/p&gt;
&lt;p&gt;Quick Google search has introduced me to the concept of web frameworks and I
have semi-randomly chosen &lt;a href="https://bottlepy.org/"&gt;Bottle&lt;/a&gt;. At that moment I've had no intention to
expose it to the open network, the app and the database were to be stored on the
USB stick and launched locally when needed. Smartphone interaction was planned
either via LAN or using saved HTML pages for read-only access when not at home.
Bottle uses no dependencies other than standard library and the whole framework
is packaged into a single file. It was perfect for the portable app scenario.&lt;/p&gt;
&lt;p&gt;After the development started and I saw how difficult it is to make a web
application, I've decided there is no point to confine the result of all that
labor to a single computer. Why use static (maybe even outdated) HTML dumps on
the smartphone when we could access full functionality of the application via
web site?&lt;/p&gt;
&lt;h3 id="traditional-web-application"&gt;&lt;a class="toclink" href="#traditional-web-application"&gt;Traditional web application&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The development was already going on, powered by Python and Bottle. What I was
missing was the server to host my application at. Turns out launching a web site
can be very cheap these days! Even as cheap as free.&lt;/p&gt;
&lt;p&gt;I've started with a free domain name from &lt;a href="https://freenom.com/"&gt;Freenom&lt;/a&gt; and a free hosting from Red
Hat's &lt;a href="https://www.openshift.com/"&gt;OpenShift&lt;/a&gt;. Both of them have had upsides and downsides but no downsides
were significant enough to turn down the price of free. Freenom domains are
considered low quality from SEO standpoint, but that was completely irrelevant
in my case. OpenShift server had to receive at least one http request every 24
hours to stay awake, and I've cheated that with a cron job on my router. No
inconveniences whatsoever.&lt;/p&gt;
&lt;p&gt;I have to digress to emphasize: OpenShift was great! It was easy to set up and
very convenient to use. Its documentation was very thorough and up to date.
OpenShift has introduced me to some concepts I would have not encountered
otherwise, like automated deploying after git push and handling proper wsgi
server. And all of that was for free. I'm very thankful to Red Hat for that.&lt;/p&gt;
&lt;p&gt;Unfortunately, as Mr. Heinlein &lt;a href="https://en.wikipedia.org/wiki/The_Moon_Is_a_Harsh_Mistress"&gt;used to reiterate&lt;/a&gt;, there ain't no
such thing as a free lunch. Red Hat could not pay the bills for all the computer
enthusiasts forever and version 3 of OpenShift imposed much tighter restrictions
on the free accounts. I've had to move to a cheap virtual private server and to
learn to set up and maintain an Apache instance on my own. New VPS was sometimes
too slow compared to what OpenShift has offered and I might need to migrate to
another hosting provider later, but everything was fine for now.&lt;/p&gt;
&lt;p&gt;I could concentrate on the development.&lt;/p&gt;
&lt;h2 id="the-unknown-unknowns"&gt;&lt;a class="toclink" href="#the-unknown-unknowns"&gt;The unknown unknowns&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Little did I know that while I was keeping myself busy with seemingly important
problems such as whether to store images as blobs in database or as files on the
file system a number of much more important problems were creeping up behind me.
Donald Rumsfeld has called these things &lt;em&gt;the unknown unknowns&lt;/em&gt; - the things that
we don't know while remaining unaware about the very fact of not knowing.&lt;/p&gt;
&lt;h3 id="orm"&gt;&lt;a class="toclink" href="#orm"&gt;ORM&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;SQLite to store data. Web framework to interact with user. Python to glue them
together. The need in all these parts comes naturally, you could not "forget" to
use any one of them. Yet they are not the only parts that are needed.&lt;/p&gt;
&lt;p&gt;Nowhere in Python's database API documentation it says that composing each query
individually is highly inefficient in a database-driven application. No one
hints that there exist a whole other class of libraries called Object-Relational
Mappers (&lt;a href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;ORM&lt;/a&gt;). And I was not clever enough to deduce that on my own.&lt;/p&gt;
&lt;p&gt;But I wasn't too dumb either. I figured that repeating myself every time I
needed to run a simple query was wrong. So I stashed that code away into &lt;a href="https://github.com/sio/HomeLibraryCatalog/blob/1452531ec05f049c6a758530d7f526f05c188ba1/hlc/db.py#L356"&gt;SQL&lt;/a&gt;
class. I figured that Book and Author objects require a lot of common methods to
interact with database. So I separated that code into &lt;a href="https://github.com/sio/HomeLibraryCatalog/blob/1452531ec05f049c6a758530d7f526f05c188ba1/hlc/items.py#L37"&gt;TableEntityWithID&lt;/a&gt; class.
I have essentially implemented an ORM without knowing what ORM is. Of course, it
is far inferior to SQLAlchemy and the likes. Of course, I will never use it in
another project now that I know that there are industry standard solutions in
this area. But I see no point in replacing my (suboptimal) implementation now.
Because it works and nothing is broken and nothing is missing.&lt;/p&gt;
&lt;p&gt;I consider my ORM to be a valuable educational experience even if it somewhat
stalled the overall progress of the project.&lt;/p&gt;
&lt;h3 id="multi-threading"&gt;&lt;a class="toclink" href="#multi-threading"&gt;Multi-threading&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I was developing the application I was using Bottle's builtin wsgiref web
server. Running that server in production environment is not recommended because
it was not built to withstand all the nastiness of open Internet. It is also a
single threaded server which means it can not accept a request until it's done
serving the previous one. The single-threadiness did not concern me - my app was
intended to be used by two or three users tops and simultaneous requests would
happen very seldom. Yet all the proper web servers (Apache, Nginx etc) are
created to scale up to thousands and millions of users. Of course, they are
multithreaded and multiprocessing. My application was not ready for that. Some
would say SQLite is not ready for that either.&lt;/p&gt;
&lt;p&gt;At first I considered crippling Apache to use only a single thread or switching
to another server that can operate in a single thread mode. OpenShift seduced me
with maintenance-free setup of Apache and I've abandoned that idea.&lt;/p&gt;
&lt;p&gt;The code I've come up with to use a different instance of some objects for each
thread is &lt;a href="https://github.com/sio/HomeLibraryCatalog/blob/1452531ec05f049c6a758530d7f526f05c188ba1/hlc/web.py#L1173"&gt;rather ugly&lt;/a&gt;. And it works only 90% of the time. So I
just restart the Python workers every hour to avoid HTTP 500 errors when the
database gets locked up. Not the best engineering decision of mine.&lt;/p&gt;
&lt;p&gt;There probably exists a proper solution to multithreaded SQLite access, but so
far I have not guessed what keywords to ask Google for it.&lt;/p&gt;
&lt;h3 id="database-migrations"&gt;&lt;a class="toclink" href="#database-migrations"&gt;Database migrations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I was aware that changing database schema after the database was populated is
hard and can lead to data loss. So I have put a lot of thought into designing
it. I've even fired up GraphViz and created a &lt;a href="https://github.com/sio/HomeLibraryCatalog/blob/master/docs/relations.gv.pdf"&gt;nice chart&lt;/a&gt; that I've
printed out and looked at on the commute. I wanted the database schema to be
iron-clad and to require no changes in future.&lt;/p&gt;
&lt;p&gt;I was very naive.&lt;/p&gt;
&lt;p&gt;Of course it would require changes. Everything around us changes, we change, our
expectations towards software change. At that point I understood that updating
database manually was not a solution: there would be no trace left whether the
schema was updated, which changes were introduced and which version does it
correspond now to. So I've coded a simple &lt;a href="https://github.com/sio/HomeLibraryCatalog/blob/master/hlc/db_transition.py"&gt;transition&lt;/a&gt; module that would do that
work for me. And later I've learned that the process I was automating is called
&lt;a href="https://en.wikipedia.org/wiki/Schema_migration"&gt;database migration&lt;/a&gt;, and there are tools written by professionals for it.&lt;/p&gt;
&lt;h3 id="javascript-is-a-lot-of-work"&gt;&lt;a class="toclink" href="#javascript-is-a-lot-of-work"&gt;JavaScript is a lot of work&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I tried to avoid adding dependencies whenever I could. So I've decided to write
what little client-side logic I needed in pure JavaScript. I have no experience
with any JS framework so I thought that avoiding to learn one would compensate
for the inconvenience. I'm not sure it did.&lt;/p&gt;
&lt;p&gt;Most of my JS code is written intuitively, with no awareness of best practises
and is filled with "code smells". Writing from scratch was sometimes quite
educating, e.g with AJAX calls - now I understand and can explain them better than
ever before. Overall conclusion is that JavaScript is hard. And that frameworks
probably exist for a reason. If I'll do another web app project, I'll probably
look into some lightweight framework to save time writing JS, which I find not
very enjoyable.&lt;/p&gt;
&lt;h3 id="modular-design"&gt;&lt;a class="toclink" href="#modular-design"&gt;Modular design&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One might think that splitting code into modules comes naturally. At least I
did. And I was wrong. When I was not specifically thinking about their size some
modules tended to grow large. A thousand lines is pretty hard to do a quick
overview on, and even harder to split after the fact. Some modularity has to be
designed from the beginning.&lt;/p&gt;
&lt;p&gt;I don't know how I could've avoided that. Guess it comes with the experience.&lt;/p&gt;
&lt;h3 id="mvc"&gt;&lt;a class="toclink" href="#mvc"&gt;MVC&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is another example of a sensible principle that's hard to come by without
someone teaching you. &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;Model-View-Controller&lt;/a&gt; is a logical extension of
modularity principle which I was totally unaware about. I have made some
intuitive steps in the right direction, but overall my application is a soup of
interleaved components. That complicates maintenance and further development and
makes the code more difficult to understand for other developers.&lt;/p&gt;
&lt;p&gt;If I would've gone with a bigger framework like Flask or Django, MVC mindset
might have been forced down on me. For a newbie who doesn't know anything some
dictatorship isn't that bad.&lt;/p&gt;
&lt;h2 id="it-works"&gt;&lt;a class="toclink" href="#it-works"&gt;It works!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After all the difficulties and complications (both expected and unexpected) I
can proudly say that the Library project is a success. The website is up and
running for almost a year. There has been no significant downtimes and no data
loss, most of our books have been catalogued. And most important, me and my wife
do enjoy using it!&lt;/p&gt;
&lt;p&gt;The application supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating and editing book entries.&lt;/li&gt;
&lt;li&gt;Storing and displaying book metadata, cover thumbnail and arbitrary related
  files. Each book can be connected with any number of authors, series and/or
  tags.&lt;/li&gt;
&lt;li&gt;Using ISBN to fetch book information from several third-party sources&lt;/li&gt;
&lt;li&gt;Queuing ISBNs for input. This is helpful when you process a lot of books with
  barcode scanner and don't have the time to clean up automatic metadata on each
  one of them&lt;/li&gt;
&lt;li&gt;Adding 1-to-5 star ratings and text reviews to any book in the library&lt;/li&gt;
&lt;li&gt;Searching for books by exact metadata match and with wildcards&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can access &lt;a href="https://github.com/sio/HomeLibraryCatalog"&gt;the source code&lt;/a&gt; on GitHub and see the site in action at
&lt;a href="https://morebooks.ml"&gt;https://morebooks.ml&lt;/a&gt; (registration is for family members only, sorry).  Of
course, there are plenty of improvements to be made (you can see how long the
TODO list is), but the maintenance itself requires almost zero attention now
and I can happily switch from being a developer to becoming the end user.&lt;/p&gt;</content><category term="python"></category><category term="web"></category><category term="HomeLibraryCatalog"></category></entry><entry><title>Excel as a CSV editor (with VBA)</title><link href="https://potyarkin.ml/posts/2018/excel-as-a-csv-editor-with-vba/" rel="alternate"></link><published>2018-06-01T00:00:00+03:00</published><updated>2018-06-01T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-06-01:/posts/2018/excel-as-a-csv-editor-with-vba/</id><summary type="html">&lt;p&gt;One might think that Excel is a decent CSV editor as it is, but it's not. It is
a very capable CSV reader, I do not dispute that. When it comes to writing though,
Excel does not match what you'd expect from a mature application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It might change the delimiter …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;One might think that Excel is a decent CSV editor as it is, but it's not. It is
a very capable CSV reader, I do not dispute that. When it comes to writing though,
Excel does not match what you'd expect from a mature application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It might change the delimiter character arbitrarily;&lt;/li&gt;
&lt;li&gt;It might write numbers in the regional format that does not map to a number
  anywhere outside Excel;&lt;/li&gt;
&lt;li&gt;It might add quotes that are inconsistent with the rest of the file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're collaborating on the CSV file with others, their Excel version might
have different defaults and produce incompatible output.  Even if you're the only
one working on that CSV, you can forget about clean diffs and sensible atomic
commits to your version control system.&lt;/p&gt;
&lt;p&gt;The only solution is not to overwrite CSV files you've opened with Excel. Use
another tool designed specifically for dealing with CSV or edit the file
manually in the text editor of your choosing.&lt;/p&gt;
&lt;h2 id="append-to-csv-with-vba"&gt;&lt;a class="toclink" href="#append-to-csv-with-vba"&gt;Append to CSV with VBA&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wrote a small helper utility to append data rows to the CSV files from Excel that
ensures you won't mess up the existing data. This is a one-day hobby project, and
Excel serves more as the UI toolkit and runtime environment than as the
spreadsheet application, so you should be careful if you decide to rely on that
code. The project is licensed under the &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sio/CSV-Append/blob/master/CSVAppend.bas"&gt;Main VBA module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The resulting &lt;a href="https://github.com/sio/CSV-Append/raw/master/CSV-Editor.xlsm"&gt;application&lt;/a&gt;, packaged in a workbook.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The application reads parameters from named ranges, opens the required file,
parses CSV header and displays a submission form for a new data row. Upon
submission it combines new values into a CSV string and appends it to the file.
All data manipulation is done in VBA. This app could have and should have been
written in any modern language - it would probably have cleaner code. Excel is
super easy to draft a simple UI though :)&lt;/p&gt;
&lt;p&gt;The code is pretty straightforward so I'll highlight only the most interesting
parts.&lt;/p&gt;
&lt;h2 id="reading-and-writing-unicode-with-vba"&gt;&lt;a class="toclink" href="#reading-and-writing-unicode-with-vba"&gt;Reading and writing Unicode with VBA&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Visual Basic for Applications is a hopelessly outdated environment. Unicode
support can be achieved only with the help of COM interoperability, namely the
&lt;code&gt;ADODB.Stream&lt;/code&gt; object. This object provides a very comfortable interface for
reading and writing text files in a bytestream mode, and also handles character
encoding nicely.&lt;/p&gt;
&lt;p&gt;Appending to a file is done via combination of seeking to the end of stream
and writing the new data.&lt;/p&gt;
&lt;h2 id="csv-packing-and-unpacking"&gt;&lt;a class="toclink" href="#csv-packing-and-unpacking"&gt;CSV packing and unpacking&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I'm not exactly proud of how CSV string manipulations are implemented in the code.
If VBA would've provided some nicer regex capabilities or a CSV-aware library it
would've been better. I know about &lt;code&gt;VBScript.RegExp&lt;/code&gt;, but it's an overkill for a
small task my app was created to accomplish.&lt;/p&gt;
&lt;p&gt;Current implementation can not handle a quote symbol in the middle of the field
value. This is a known bug.&lt;/p&gt;
&lt;h2 id="demo"&gt;&lt;a class="toclink" href="#demo"&gt;Demo&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This the main and the only UI my utility offers. Inputs and buttons are meant to
be self explaining. No value conversion is done when saving - the value of the
cell is written as is, quotes are added if delimiter character occurs within
the value.&lt;/p&gt;
&lt;p&gt;Screenshot below is produced after loading demo CSV file with the following
header:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ID,Column1,Column2,Column3 with very long header,&amp;quot;Column4, with delimiter in the name&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://potyarkin.ml/posts/2018/excel-as-a-csv-editor-with-vba/csv-append.png"&gt;&lt;img alt="CSV Append" src="https://potyarkin.ml/posts/2018/excel-as-a-csv-editor-with-vba/csv-append.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The project is published for educational and archival purposes. I'll be glad if
you'll find any use for it.&lt;/p&gt;</content><category term="excel"></category><category term="vba"></category><category term="gist"></category></entry><entry><title>Why software translation is a waste of time</title><link href="https://potyarkin.ml/posts/2018/why-software-translation-is-a-waste-of-time/" rel="alternate"></link><published>2018-05-24T00:00:00+03:00</published><updated>2018-05-24T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-05-24:/posts/2018/why-software-translation-is-a-waste-of-time/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I am not a professional software developer, and my opinion
might not be as authoritative as yours.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My native language is not English and since my first encounter with computers I
have used multiple localized and non-localized computer programs. All these
years of &lt;em&gt;"user experience"&lt;/em&gt; have led me to …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I am not a professional software developer, and my opinion
might not be as authoritative as yours.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My native language is not English and since my first encounter with computers I
have used multiple localized and non-localized computer programs. All these
years of &lt;em&gt;"user experience"&lt;/em&gt; have led me to believe that software localization
is more often harmful than not.&lt;/p&gt;
&lt;p&gt;Software translation is a waste of time. Generally.&lt;/p&gt;
&lt;p&gt;I am not against localization as a whole. It has many positive aspects like
supporting foreign date and currency formats, right-to-left writing or
alphabetical sorting. But translating user interface, configuration files,
error and log messages to other languages had destructive consequences most of
the times I've seen it.&lt;/p&gt;
&lt;h2 id="documentation-loss"&gt;&lt;a class="toclink" href="#documentation-loss"&gt;Documentation loss&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The moment software is translated its documentation becomes fragmented and
incomplete. Even if the developer translates 100% of official documentation
they will still lose everything written by others (blog posts, forum questions,
bug reports).&lt;/p&gt;
&lt;p&gt;I was twelve when a friend of mine gave me a book on photo editing. The authors
explained how images are stored on computers, what is the difference between
raster and vector graphics, but the narrative was mostly centered on using Adobe Photoshop -
version 7.0, if I recall correctly. And that was one large useless book.
Because the authors used the English version of that editor and all we've had
was the translated one.&lt;/p&gt;
&lt;p&gt;You might think it was a mistake on the authors' part, but they were smart and
experienced people. They knew it was pointless to reference a translated version
because no professional user would have used Russian interface at that time.
And they knew that the next version might come with totally different
translation for the same UI elements.&lt;/p&gt;
&lt;h2 id="incomplete-or-wrong-translation-is-worse-than-no-translation-at-all"&gt;&lt;a class="toclink" href="#incomplete-or-wrong-translation-is-worse-than-no-translation-at-all"&gt;Incomplete or wrong translation is worse than no translation at all&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are not sure you can afford a good translation, don't do one. I can not
stress enough how confusing it is to have a piece of software that uses your
native language, and not to be able to understand the meaning of its messages
without translating them back to English first. This happens all the time when
software is translated by people who do not use it daily and do not understand
all the usecases there are.&lt;/p&gt;
&lt;p&gt;I took part in translation of an open source program once. I was a student and
I've had a lot of free time, so I thought I could do some good and contribute
back to the software I thought was worthy.&lt;/p&gt;
&lt;p&gt;It was a social media plugin for a bigger application. We had a team of maybe a
dozen volunteer translators and a coordinator with write access to the source
control system. Usually he would email us a day before the next release with a
file containing strings that needed to be translated. And then the farce
started.&lt;/p&gt;
&lt;p&gt;Those of us who were available at the moment started translating. We didn't
know where in the application we would later see those strings. Even if we
weren't lazy (guilty) and would've launched non-localized development version
of the application, we would not have been able to match 100% of new strings to
all the places they'd be used at. The coordinator was not any less blind than
the rest of us. He knew a lot about the application code base, but he was not a
superhuman - he could not possibly track all the developers and understand all
their intentions. So we shipped some embarrassing translation errors... I'm
glad no lives depended on that software!&lt;/p&gt;
&lt;h2 id="lost-in-translation"&gt;&lt;a class="toclink" href="#lost-in-translation"&gt;Lost in translation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I concede that our team was lacking in terms of organizational skills, after
all we were just part-time volunteers. But the translators hired by big
corporations are merely human too, and they make mistakes. Especially when the
headquarters is pressuring to ship a new product.&lt;/p&gt;
&lt;p&gt;For more than ten years Microsoft Excel, a flagman spreadsheet application used
by millions, has had two duplicate entries in row/column context menu: "Вставить"
and "Вставить". The first one had a nice icon and meant "Paste (copied cells)"
and the second one was iconless and meant "Insert (new row/column)". They've
removed the text from the first one now, converting it to a button. Ambiguity
still remains (the pop-up text for the button is the same) but is less
confusing. Especially since users are already accustomed to it :)&lt;/p&gt;
&lt;h2 id="unsearchable-error-messages"&gt;&lt;a class="toclink" href="#unsearchable-error-messages"&gt;Unsearchable error messages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Have you ever received a cryptic error message and had no idea what it meant?
I'm sure you have. That message would only become more cryptic if it was
translated. And if the error is not exactly common or the app is not popular in
your country, Google will not be able to help you either.&lt;/p&gt;
&lt;p&gt;So, for the sake of your users' sanity, please do not ever localize error
messages and log files! Help people to help themselves.&lt;/p&gt;
&lt;h2 id="untranslatable-abstractions"&gt;&lt;a class="toclink" href="#untranslatable-abstractions"&gt;Untranslatable abstractions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some ideas are just so new, or the problem domain is so narrow that there is no
point translating the terms. The concept of &lt;code&gt;File&lt;/code&gt; was foreign to every person
seeing the computer for the first time - but that knowledge is easily acquired.
It would not have been any easier explaining that same concept and labeling it
&lt;code&gt;Файл&lt;/code&gt; (Russian translation), so why bother introducing two terms?&lt;/p&gt;
&lt;p&gt;"File" ship has long sailed, but new abstractions are being introduced every
day. Translating them to multiple languages just slows their adoption and
hinders communication between users.&lt;/p&gt;
&lt;h2 id="afterword"&gt;&lt;a class="toclink" href="#afterword"&gt;Afterword&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I'm not hoping we will wake up one day and The Tower of Babel didn't happen.
This rant is mostly useless, but if at any time because of it a software
developer will decide that their users are educated enough to understand
written English or a software user will decide to acquire entry-level English
skills, I'll consider my time well spent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This has been stewing for quite some time... At least since 2012, after I've
read &lt;a href="https://joeyh.name/blog/entry/on_localization_and_progress/"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="l10n"></category><category term="i18n"></category></entry><entry><title>Unit testing in Power Query M Language</title><link href="https://potyarkin.ml/posts/2018/unit-testing-in-power-query-m-language/" rel="alternate"></link><published>2018-04-01T12:00:00+03:00</published><updated>2018-04-01T12:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-04-01:/posts/2018/unit-testing-in-power-query-m-language/</id><summary type="html">&lt;p&gt;As your code base gets bigger,
&lt;a href="https://en.wikipedia.org/wiki/Test_automation"&gt;test automation&lt;/a&gt; becomes more
and more important. This applies to any development platform, including Power
Query / PowerBI. If you reuse your code and improve some low level function
later, test automation allows you to make sure your changes did not break
anything that depends …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As your code base gets bigger,
&lt;a href="https://en.wikipedia.org/wiki/Test_automation"&gt;test automation&lt;/a&gt; becomes more
and more important. This applies to any development platform, including Power
Query / PowerBI. If you reuse your code and improve some low level function
later, test automation allows you to make sure your changes did not break
anything that depends on the part of code you've just modified.&lt;/p&gt;
&lt;p&gt;As far as I know, there are no tools that allow us to perform automated testing
of functions and queries written in Power Query M language. That's why I've
built a simple unit testing framework into &lt;a href="https://github.com/sio/LibPQ"&gt;LibPQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="libpq-unittest-framework"&gt;&lt;a class="toclink" href="#libpq-unittest-framework"&gt;LibPQ UnitTest framework&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/sio/LibPQ/blob/master/Docs/UnitTesting.md"&gt;UnitTest&lt;/a&gt; framework is modelled after the only other unit testing tool I
have experience with: Python's
&lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt;. It offers the
following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test suites to arbitrarily group individual test cases&lt;/li&gt;
&lt;li&gt;Assertion functions to test simple statements&lt;/li&gt;
&lt;li&gt;Subtests to execute the same test on a sequence of sample inputs&lt;/li&gt;
&lt;li&gt;Test runner and test discovery functions to execute your test suites&lt;/li&gt;
&lt;li&gt;Test results table that can be analyzed either manually or with any
  automation tool you create&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inner workings of the test framework are described in the
&lt;a href="https://github.com/sio/LibPQ/blob/master/Docs/UnitTesting.md"&gt;documentation&lt;/a&gt;. This article will demonstrate how it works.&lt;/p&gt;
&lt;h2 id="unittest-demo"&gt;&lt;a class="toclink" href="#unittest-demo"&gt;UnitTest demo&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All modules described here are imported with LibPQ, so a basic familiarity with the library is assumed (&lt;a href="https://github.com/sio/LibPQ/blob/master/README.md"&gt;readme&lt;/a&gt;, &lt;a href="https://potyarkin.ml/posts/2018/getting-started-with-libpq/"&gt;getting started&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Let's create a basic test suite and save it in the directory listed in &lt;code&gt;LibPQPath&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* DemoTests.pq - sample test suite */&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;Assert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LibPQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UnitTest.Assert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;testFirstTest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;testAlwaysFail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;LibPQ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TestSuite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The test suite is a record (note the square brackets surrounding the code) that
contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two test cases (values prefixed with "test")&lt;ul&gt;
&lt;li&gt;The first test will pass because 6 times 7 is 42&lt;/li&gt;
&lt;li&gt;The second test will always fail because "foo" and "bar" are different
strings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;And one related value: &lt;code&gt;Assert&lt;/code&gt; is a helper for building test functions. Its
  use is not required, but makes writing tests much easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last line contains metadata that marks the test suite as such and allows
test discovery tools to distinguish it from just another record.&lt;/p&gt;
&lt;p&gt;Here is what &lt;a href="https://github.com/sio/LibPQ/blob/master/Modules/UnitTest.Discover.pq"&gt;UnitTest.Discover&lt;/a&gt; function will do when invoked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search all locally available modules for valid test suites (hence the metadata)&lt;/li&gt;
&lt;li&gt;Execute each located test suite with &lt;a href="https://github.com/sio/LibPQ/blob/master/Modules/UnitTest.Run.pq"&gt;UnitTest.Run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Return the test results as a table, reporting as much data about the failed
  tests as possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://potyarkin.ml/posts/2018/unit-testing-in-power-query-m-language/libpq-unittest-long.png"&gt;&lt;img alt="Test results" src="https://potyarkin.ml/posts/2018/unit-testing-in-power-query-m-language/libpq-unittest-long.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the screenshot above we invoke &lt;a href="https://github.com/sio/LibPQ/blob/master/Modules/UnitTest.Discover.pq"&gt;UnitTest.Discover&lt;/a&gt; with &lt;code&gt;compact_output =
false&lt;/code&gt; but when you'll have dozens of test cases you'll probably prefer default
behavior (group test results by status).&lt;/p&gt;
&lt;h2 id="more-about-unittest-in-libpq"&gt;&lt;a class="toclink" href="#more-about-unittest-in-libpq"&gt;More about UnitTest in LibPQ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you liked the idea of unit testing M language code, check out the main
&lt;a href="https://github.com/sio/LibPQ/blob/master/Docs/UnitTesting.md"&gt;UnitTest&lt;/a&gt; documentation and a more extensive &lt;a href="https://github.com/sio/LibPQ/blob/master/Samples/Tests.Sample.pq"&gt;test sample&lt;/a&gt; that makes use of
subtests.&lt;/p&gt;</content><category term="m"></category><category term="power-query"></category><category term="LibPQ"></category></entry><entry><title>Getting started with LibPQ</title><link href="https://potyarkin.ml/posts/2018/getting-started-with-libpq/" rel="alternate"></link><published>2018-04-01T00:00:00+03:00</published><updated>2018-04-01T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-04-01:/posts/2018/getting-started-with-libpq/</id><summary type="html">&lt;p&gt;This is a step by step guide to getting started with &lt;a href="https://potyarkin.ml/posts/2018/expanding-power-query-standard-library-introducing-libpq/"&gt;LibPQ&lt;/a&gt;, an illustrated
version of &lt;a href="https://github.com/sio/LibPQ/blob/master/README.md#installation-and-usage"&gt;"Installation and usage"&lt;/a&gt; section of the official
documentation.&lt;/p&gt;
&lt;h2 id="installation"&gt;&lt;a class="toclink" href="#installation"&gt;Installation&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="libpq-source-code"&gt;&lt;a class="toclink" href="#libpq-source-code"&gt;LibPQ source code&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The source code of the library has to be present in each workbook that uses it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new blank query: &lt;code&gt;Data …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is a step by step guide to getting started with &lt;a href="https://potyarkin.ml/posts/2018/expanding-power-query-standard-library-introducing-libpq/"&gt;LibPQ&lt;/a&gt;, an illustrated
version of &lt;a href="https://github.com/sio/LibPQ/blob/master/README.md#installation-and-usage"&gt;"Installation and usage"&lt;/a&gt; section of the official
documentation.&lt;/p&gt;
&lt;h2 id="installation"&gt;&lt;a class="toclink" href="#installation"&gt;Installation&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="libpq-source-code"&gt;&lt;a class="toclink" href="#libpq-source-code"&gt;LibPQ source code&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The source code of the library has to be present in each workbook that uses it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new blank query: &lt;code&gt;Data &amp;gt; Get &amp;amp; Transform &amp;gt; From Other Sources &amp;gt;
  Blank Query&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go to "Advanced editor" and replace the query code with the contents of
  &lt;a href="https://potyarkin.ml/posts/2018/expanding-power-query-standard-library-introducing-libpq/"&gt;&lt;code&gt;LibPQ.pq&lt;/code&gt;&lt;/a&gt; (switch to "Raw" view to make selecting easier)&lt;/li&gt;
&lt;li&gt;Save new query under the name &lt;code&gt;LibPQ&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-main-module.png"&gt;&lt;img alt="Main module of LibPQ" src="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-main-module.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="specifying-modules-location"&gt;&lt;a class="toclink" href="#specifying-modules-location"&gt;Specifying modules location&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After the previous step LibPQ doesn't know yet where it should get the modules'
source code from. You can specify an unlimited number of local and web locations
where the modules are saved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new blank query and name it &lt;code&gt;LibPQPath&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy the contents of &lt;a href="https://github.com/sio/LibPQ/blob/master/LibPQPath-sample.pq"&gt;LibPQPath-sample.pq&lt;/a&gt; and modify it in Advanced editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-path-editor.png"&gt;&lt;img alt="LibPQ-Path" src="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-path-editor.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LibPQ will search for your modules first in local directories (in order they
are listed), then in web locations. If the module is found, no further
locations are checked.&lt;/p&gt;
&lt;p&gt;It helps with the name collisions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let's say you have a module &lt;code&gt;FavoritePets.pq&lt;/code&gt; stored in your module
  collection at &lt;code&gt;http://yoursite.com/PowerQueryModules/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;At the same time you use some modules from a friend's module collection
  at &lt;code&gt;http://friendname.com/PowerQueryModules/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If your friend adds a module with the same name to their collection, all
  you need to do to ignore it is to make sure that your collection address
  is higher in the &lt;code&gt;LibPQPath&lt;/code&gt; than your friend's.&lt;/li&gt;
&lt;li&gt;That works both ways: you and your friend can continue sharing your
  module collections while using personal modules with colliding names
  without any problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="reusable-template"&gt;&lt;a class="toclink" href="#reusable-template"&gt;Reusable template&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is not necessary to repeat the installation steps every time you want to use LibPQ. You can add LibPQ to an empty workbook and save is as a template for future use.&lt;/p&gt;
&lt;h2 id="usage"&gt;&lt;a class="toclink" href="#usage"&gt;Usage&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="importing-existing-module"&gt;&lt;a class="toclink" href="#importing-existing-module"&gt;Importing existing module&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Import any available module with &lt;code&gt;LibPQ("ModuleName")&lt;/code&gt; when writing your
queries in Advanced editor. LibPQ will search for the file named
&lt;code&gt;ModuleName.pq&lt;/code&gt; in all locations that you've listed in LibPQPath. If the module
is found, its source code will be evaluated and the result will be returned.&lt;/p&gt;
&lt;p&gt;For example, let's import &lt;code&gt;Date.Parse&lt;/code&gt; from standard LibPQ collection:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-date-parse.png"&gt;&lt;img alt="Date.Parse" src="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-date-parse.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That works because &lt;code&gt;LibPQPath&lt;/code&gt; contains reference to
&lt;code&gt;https://raw.githubusercontent.com/sio/LibPQ/master/Modules/&lt;/code&gt;, where the source
code for &lt;code&gt;Date.Parse.pq&lt;/code&gt; is located.&lt;/p&gt;
&lt;h3 id="creating-a-new-module"&gt;&lt;a class="toclink" href="#creating-a-new-module"&gt;Creating a new module&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can save any reusable Power Query function or query to be imported by LibPQ
later:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy the code of that module to any text editor (I recommend Notepad++) and
  save it with &lt;code&gt;*.pq&lt;/code&gt; extension&lt;/li&gt;
&lt;li&gt;Place the module into any location listed in &lt;code&gt;LibPQPath&lt;/code&gt; and it will become
  available for importing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any further questions about LibPQ please create an &lt;a href="https://github.com/sio/LibPQ/issues"&gt;issue&lt;/a&gt; on GitHub
or contact me via &lt;a href="mailto:sio.wtf@gmail.com"&gt;e-mail&lt;/a&gt;.&lt;/p&gt;</content><category term="m"></category><category term="power-query"></category><category term="LibPQ"></category></entry><entry><title>Roads and Bridges - sustaining modern digital infrastructure</title><link href="https://potyarkin.ml/posts/2018/roads-and-bridges-sustaining-modern-digital-infrastructure/" rel="alternate"></link><published>2018-02-23T00:00:00+03:00</published><updated>2018-02-23T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-02-23:/posts/2018/roads-and-bridges-sustaining-modern-digital-infrastructure/</id><summary type="html">&lt;p&gt;This week I have stumbled upon a very thorough review of existing problems and
hidden costs of sustaining modern (open source) digital infrastructure. Here it
is: &lt;a href="https://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/"&gt;Roads and Bridges - The Unseen Labor Behind Our Digital
Infrastructure&lt;/a&gt; by &lt;em&gt;Nadia Eghbal&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The essay was created with support from the Ford Foundation and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week I have stumbled upon a very thorough review of existing problems and
hidden costs of sustaining modern (open source) digital infrastructure. Here it
is: &lt;a href="https://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/"&gt;Roads and Bridges - The Unseen Labor Behind Our Digital
Infrastructure&lt;/a&gt; by &lt;em&gt;Nadia Eghbal&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The essay was created with support from the Ford Foundation and is published on
their website under a Creative Commons license. Unfortunately, that website
denies access to users from certain countries (like Russia), so here is a
&lt;a href="https://potyarkin.ml/posts/2018/roads-and-bridges-sustaining-modern-digital-infrastructure/roads-and-bridges.pdf"&gt;mirror of PDF version&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The author discusses important and often overlooked topics of why open source
software gets built and by whom, of who pays the costs of building and
maintaining that software and of how to ensure that the software we all rely
upon continues to be &lt;em&gt;reliable&lt;/em&gt;. The essay poses more questions than it
answers, but I still consider it the best read on the topic of sustaining open
source development.&lt;/p&gt;
&lt;p&gt;In my case Nadia Eghbal was "preaching to the converted" so this post is me
trying to spread her word. Please read her essay and please do not take open
source software for granted. The costs of building it are just payed by others,
may be you can figure out how to help them?&lt;/p&gt;</content><category term="bookmarks"></category><category term="opensource"></category></entry><entry><title>Expanding Power Query standard library - introducing LibPQ</title><link href="https://potyarkin.ml/posts/2018/expanding-power-query-standard-library-introducing-libpq/" rel="alternate"></link><published>2018-01-03T00:00:00+03:00</published><updated>2018-01-03T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-01-03:/posts/2018/expanding-power-query-standard-library-introducing-libpq/</id><summary type="html">&lt;p&gt;Power Query formula language (also known as M language) is a very capable yet
not very flexible tool. It lacks some features taken for granted by developers
who are used to other programming languages such as compatibility with version
control systems, extensibility by third-party libraries, etc.&lt;/p&gt;
&lt;p&gt;That is why I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Power Query formula language (also known as M language) is a very capable yet
not very flexible tool. It lacks some features taken for granted by developers
who are used to other programming languages such as compatibility with version
control systems, extensibility by third-party libraries, etc.&lt;/p&gt;
&lt;p&gt;That is why I have started &lt;strong&gt;&lt;a href="https://github.com/sio/LibPQ"&gt;LibPQ&lt;/a&gt;&lt;/strong&gt; - an open-source M language library
meant to expand the standard library and to make it easier for others to do so.
Its main features are:&lt;/p&gt;
&lt;h3 id="importing-source-code-from-plain-text-files-located-on-disk-or-on-the-web"&gt;&lt;a class="toclink" href="#importing-source-code-from-plain-text-files-located-on-disk-or-on-the-web"&gt;Importing source code from plain text files located on disk or on the web&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;LibPQ stores its modules as plain text files with &lt;code&gt;*.pq&lt;/code&gt; extension.  Detaching
source code from the workbooks that execute it has a lot of advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The source code can be managed by version control system such as git&lt;/li&gt;
&lt;li&gt;Multiple workbooks referring to the same module will always use the same
  (latest) code&lt;/li&gt;
&lt;li&gt;It encourages splitting your code into smaller reusable units&lt;/li&gt;
&lt;li&gt;You can edit the source code with any editor you like (autocompletion and
  syntax highlighting are nice features even though Power Query's Advanced
  Editor does not have them)&lt;/li&gt;
&lt;li&gt;Sharing your code and collaborating becomes much easier&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="supporting-several-import-locations-ordered-by-priority"&gt;&lt;a class="toclink" href="#supporting-several-import-locations-ordered-by-priority"&gt;Supporting several import locations ordered by priority&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;LibPQ does not dictate where you store your source code. Inspired by Python's
&lt;a href="https://docs.python.org/3/library/sys.html#sys.path"&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; it enables specifying unlimited number of local and/or
remote sources (ordered by priority). When importing a module, LibPQ will check
these sources one by one until the required module is found.&lt;/p&gt;
&lt;h3 id="unit-testing-framework"&gt;&lt;a class="toclink" href="#unit-testing-framework"&gt;Unit testing framework&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having source code detached from the workbooks encourages you to improve and
refactor existing modules. To make sure you do not introduce regressions you
should cover your code with unit tests.&lt;/p&gt;
&lt;p&gt;There are no unit testing tools in standard library, but LibPQ offers a basic
unit testing framework that supports test discovery, grouping tests into test
suites and comes with a bunch of handy assertion functions. To learn more read
this &lt;a href="https://github.com/sio/LibPQ/blob/master/Docs/UnitTesting.md"&gt;help page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="a-collection-of-general-purpose-functions-and-queries"&gt;&lt;a class="toclink" href="#a-collection-of-general-purpose-functions-and-queries"&gt;A collection of general purpose functions and queries&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And last, LibPQ contains some general purpose modules that you might find
useful. If not - go write some new ones, you have the tools now!&lt;/p&gt;
&lt;p&gt;LibPQ is built in such way that you do not need me (or anyone else) to approve
of your work.  Save your code to any convenient location, and LibPQ will help
you to import it into your workbooks. You can even keep your modules private,
no pressure here. Have fun and enjoy your coding!&lt;/p&gt;</content><category term="m"></category><category term="excel"></category><category term="power-query"></category><category term="LibPQ"></category></entry><entry><title>Loops in Power Query M language</title><link href="https://potyarkin.ml/posts/2017/loops-in-power-query-m-language/" rel="alternate"></link><published>2017-10-31T00:00:00+03:00</published><updated>2017-10-31T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2017-10-31:/posts/2017/loops-in-power-query-m-language/</id><summary type="html">&lt;p&gt;Power Query Formula Language (also known as M language) is sometimes difficult
to get your head around. This article explains how someone familiar with loops
in other programming languages can approach the same concept in M language.&lt;/p&gt;
&lt;p&gt;First of all let's look at the &lt;a href="https://msdn.microsoft.com/en-us/library/mt211003.aspx"&gt;definition&lt;/a&gt; given by Microsoft:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Power …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Power Query Formula Language (also known as M language) is sometimes difficult
to get your head around. This article explains how someone familiar with loops
in other programming languages can approach the same concept in M language.&lt;/p&gt;
&lt;p&gt;First of all let's look at the &lt;a href="https://msdn.microsoft.com/en-us/library/mt211003.aspx"&gt;definition&lt;/a&gt; given by Microsoft:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Power Query M formula language is optimized for building highly flexible
data mashup queries. It's a &lt;strong&gt;functional&lt;/strong&gt;, case sensitive language similar
to F#, which can be used with Power BI Desktop, Power Query in Excel, and Get
&amp;amp; Transform in Excel 2016.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="functional-is-the-key-word"&gt;&lt;a class="toclink" href="#functional-is-the-key-word"&gt;"Functional" is the key word&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Understanding (and accepting) that M is entirely different from most common
programming languages has helped me as much as (maybe even more than) the
exhaustive reference at MSDN. Functional language implies declarative
programming paradigm: you describe &lt;em&gt;what&lt;/em&gt; you want the computer to do instead
of telling &lt;em&gt;how&lt;/em&gt; to do it. If you're familiar with LISP or Erlang or Haskell, M
might not look so foreign to you.&lt;/p&gt;
&lt;p&gt;The code in M is not an explicit sequence of steps that will always be executed
in the same order, it is just a bunch of ground rules that allow the computer
to arrive to the solution. You can check that the order of lines within the
&lt;code&gt;let&lt;/code&gt; statement doesn't matter: as long as all necessary intermediate steps are
described, Power Query will produce the same result even if you rearrange them
randomly.&lt;/p&gt;
&lt;p&gt;And that is the reason you don't get familiar control flow statements. &lt;em&gt;If&lt;/em&gt; is
kinda there, but it has its own quirks too. Loops are out of the question,
unless you somehow manage to implement the function that does the looping for
you. But...&lt;/p&gt;
&lt;p&gt;There already is such a function! It is &lt;code&gt;List.Generate&lt;/code&gt;!&lt;/p&gt;
&lt;h2 id="listgenerate"&gt;&lt;a class="toclink" href="#listgenerate"&gt;List.Generate&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This function takes 3 or 4 parameters, all of them functions.  (You should
always treat the &lt;code&gt;each&lt;/code&gt; statement as a function &lt;a href="https://msdn.microsoft.com/en-us/library/mt185361.aspx"&gt;because it is&lt;/a&gt; a shortcut
for function definition.)&lt;/p&gt;
&lt;p&gt;The parameters are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;: a function that takes zero arguments and returns the first loop
  item.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;condition&lt;/strong&gt;: a function that takes one argument (loop item) and returns
  boolean value. If this function returns &lt;code&gt;false&lt;/code&gt; the iteration stops,
  otherwise the loop item is added to the list of results. This function will
  be called at the end of each iteration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;next&lt;/strong&gt;: a function that takes one argument (loop item) and returns the next
  loop item. This is the worker body of the loop. Be careful to return the next
  item as the same data type with the same structure, because the returned
  value will be fed to &lt;code&gt;condition()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt; functions later. This
  function will be called at the beginning of each iteration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;transform&lt;/strong&gt;: optional argument. A function that takes one argument - the
  item from the list of results and transforms it into something else.  This
  function gets called once per each item in the list of results, and the list
  of values it returns becomes the return value of &lt;code&gt;List.Generate&lt;/code&gt;. If
  &lt;code&gt;transform()&lt;/code&gt; function is not specified, &lt;code&gt;List.Generate&lt;/code&gt; will return the list
  of items at the moment when &lt;code&gt;condition()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;List.Generate&lt;/code&gt; might be easier to understand with the following pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="a-simple-example"&gt;&lt;a class="toclink" href="#a-simple-example"&gt;A simple example&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will generate a table of data points for plotting a parabola. Internally we
will be storing each item as the record with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields.  After that we
will transform that data into a Power Query table for output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let
    data = List.Generate(
        () =&amp;gt; [x=-10, y=100],
        each [x]&amp;lt;=10,
        each [x=[x]+1, y=x*x]
    ),
    output = Table.FromRecords(data)
in output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example &lt;code&gt;start()&lt;/code&gt; is an anonymous function that always returns the
first data point, &lt;code&gt;condition()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt; are also functions even though
they are written using &lt;code&gt;each&lt;/code&gt; shortcut. There is no &lt;code&gt;transform()&lt;/code&gt; function
because it is an optional parameter.&lt;/p&gt;
&lt;h2 id="an-example-from-real-world"&gt;&lt;a class="toclink" href="#an-example-from-real-world"&gt;An example from real world&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the real world you will not need the &lt;code&gt;List.Generate&lt;/code&gt; magic for such simple
tasks, but you will still need it. Here is how I've used it recently.&lt;/p&gt;
&lt;p&gt;Assume you have a list of tables that contain the data in the same format but
for different time periods or for different locations. You have a separate list
of locations (in the correct order), but each individual table does not contain
that information. That's why combining all these tables into one would create a
mess: you have to know which row comes from what table.&lt;/p&gt;
&lt;p&gt;This can be done with &lt;code&gt;List.Generate&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NamedTables = List.Generate(
    () =&amp;gt; [i=-1, table=#table({},{})],  // initialize loop variables
    each [i] &amp;lt; List.Count(Tables),
    each [
        i=[i]+1,
        table=Table.AddColumn(Tables{i}, &amp;quot;TableName&amp;quot;, each Names{i})
    ],
    each [table]
),
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code snippet assumes you have the list of tables in the &lt;code&gt;Tables&lt;/code&gt; variable
and the list of their respective names in the &lt;code&gt;Names&lt;/code&gt; variable. The loop starts
with index of -1 and an empty table, and adds a "TableName" column to each of
the tables. After this modification the tables can be safely combined with
&lt;code&gt;Table.Combine(NamedTables)&lt;/code&gt; - no data loss will occur.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;a class="toclink" href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;List.Generate&lt;/code&gt; should be considered a last-ditch attempt to looping. M
has dedicated iterative functions for most common looping tasks, so please
check the standard library reference before creating such C-style loops
manually. They are rather hard to read, and readability counts!&lt;/p&gt;
&lt;p&gt;I hope this article will help you to understand the Power Query Formula
Language a little more. It is a powerful tool and even though it is not
perfect, I hope you will find a lot of uses for it in your data crunching
tasks.&lt;/p&gt;
&lt;h2 id="an-afterthought"&gt;&lt;a class="toclink" href="#an-afterthought"&gt;An afterthought&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Also, please keep in mind that the dot symbol in &lt;code&gt;List.Generate&lt;/code&gt; does not have
the same meaning as in other languages either. There are no object methods in
M, and there are no namespaces, so the dot is just another character without
any special meaning.  It could have been a dash or an underscore - it wouldn't
have mattered.&lt;/p&gt;</content><category term="m"></category><category term="excel"></category><category term="power-query"></category></entry><entry><title>Temporary virtual environment for Python</title><link href="https://potyarkin.ml/posts/2017/temporary-virtual-environment-for-python/" rel="alternate"></link><published>2017-10-05T16:50:00+03:00</published><updated>2017-10-05T16:50:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2017-10-05:/posts/2017/temporary-virtual-environment-for-python/</id><summary type="html">&lt;p&gt;Using Python on Windows does not come as naturally as on Unix-like systems, so
any help is appreciated.&lt;/p&gt;
&lt;p&gt;I wrote a batch script to automate creation, setup and deletion of Python virtual
environment. This can come in handy when you want to test something in a clean env,
or to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Using Python on Windows does not come as naturally as on Unix-like systems, so
any help is appreciated.&lt;/p&gt;
&lt;p&gt;I wrote a batch script to automate creation, setup and deletion of Python virtual
environment. This can come in handy when you want to test something in a clean env,
or to play with &lt;code&gt;pip install&lt;/code&gt; and get acquainted with a new package from PyPI.&lt;/p&gt;
&lt;h2 id="venv-tempbat"&gt;&lt;a class="toclink" href="#venv-tempbat"&gt;venv-temp.bat&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can download the script from
&lt;a href="https://gist.github.com/sio/fbc46ae41607b206ce9099dc8485df34"&gt;https://gist.github.com/sio/...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code is licensed under a permissive opensource license (Apache License,
Version 2.0) so feel free to use it for your hobby and work projects.&lt;/p&gt;
&lt;p&gt;Report any bugs, ideas, feature requests via GitHub issues/comments -
all feedback is welcome!&lt;/p&gt;
&lt;h2 id="installation"&gt;&lt;a class="toclink" href="#installation"&gt;Installation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Downloaded script does not require any installation.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;python&lt;/code&gt; is not available from your &lt;code&gt;%PATH%&lt;/code&gt;, you have to specify the location
of &lt;code&gt;python.exe&lt;/code&gt; in the script (change the value of &lt;code&gt;PYTHON&lt;/code&gt; variable).&lt;/p&gt;
&lt;h2 id="usage"&gt;&lt;a class="toclink" href="#usage"&gt;Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Launch the script from &lt;code&gt;cmd.exe&lt;/code&gt; to read all error output (if any) or by
double-clicking if you're confident it works on your system.&lt;/p&gt;
&lt;p&gt;After you're done experimenting and are ready to discard the venv, just end shell
session with &lt;code&gt;exit&lt;/code&gt; - the script will take care of cleanup.&lt;/p&gt;
&lt;p&gt;If you close the
terminal window without typing &lt;code&gt;exit&lt;/code&gt;, the script will be terminated before it
performs cleanup. This has no harmful consequences except taking 20-50MB of disk
space. Old venv directory will be purged before reusing, so no changes you've
made will affect the environment you'll get next time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you have no internet connection, the script remains usable, but &lt;code&gt;pip&lt;/code&gt;
will print a lot of error messages while trying to update itself. Don't worry, that's ok.&lt;/p&gt;</content><category term="windows"></category><category term="script"></category><category term="gist"></category></entry><entry><title>Execute the same git subcommand in all local repositories</title><link href="https://potyarkin.ml/posts/2017/execute-the-same-git-subcommand-in-all-local-repositories/" rel="alternate"></link><published>2017-10-05T15:40:00+03:00</published><updated>2017-10-05T15:40:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2017-10-05:/posts/2017/execute-the-same-git-subcommand-in-all-local-repositories/</id><summary type="html">&lt;p&gt;If you work with more than one git project simultaneously, you often need to
do the same maintenance tasks in each cloned repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check if there are some changes waiting to be pushed,&lt;/li&gt;
&lt;li&gt;check remote URLs for all repos (e.g. when considering to switch from HTTPS
  authentication with GitHub …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;If you work with more than one git project simultaneously, you often need to
do the same maintenance tasks in each cloned repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check if there are some changes waiting to be pushed,&lt;/li&gt;
&lt;li&gt;check remote URLs for all repos (e.g. when considering to switch from HTTPS
  authentication with GitHub to using SSH keys),&lt;/li&gt;
&lt;li&gt;view last commit messages to refresh your memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doing so with standard tools would involve a lot of &lt;code&gt;cd&lt;/code&gt;-ing, and the
inconvenience would deter you from checking all repos frequently.&lt;/p&gt;
&lt;p&gt;That's why I wrote a simple bash script that helps to &lt;em&gt;automate the boring
stuff&lt;/em&gt;. The script is well-documented, so I won't discuss implementation
details here.&lt;/p&gt;
&lt;h2 id="git-projectssh"&gt;&lt;a class="toclink" href="#git-projectssh"&gt;git-projects.sh&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can download the script from
&lt;a href="https://gist.github.com/sio/227da259cad7bb549c69909ba428884c"&gt;https://gist.github.com/sio/...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code is licensed under a permissive opensource license (Apache License,
Version 2.0) so feel free to use it for your hobby and work projects.&lt;/p&gt;
&lt;p&gt;Report any bugs, ideas, feature requests via GitHub issues/comments -
all feedback is welcome!&lt;/p&gt;
&lt;h2 id="installation"&gt;&lt;a class="toclink" href="#installation"&gt;Installation&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download the script from GitHub, add execution permissions&lt;/li&gt;
&lt;li&gt;List the paths to the local clones of your git repos in a text
  file (one path per line). If you're using relative paths they must
  be valid relative to the location of the script&lt;/li&gt;
&lt;li&gt;Update the value of &lt;code&gt;PROJECT_LIST&lt;/code&gt; variable with the path of the file
  you've just created&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="usage"&gt;&lt;a class="toclink" href="#usage"&gt;Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All command-line parameters are passed on to the &lt;code&gt;git&lt;/code&gt; command.
When the script is launched without parameters, &lt;code&gt;git-projects.sh&lt;/code&gt; checks the
status of each repo.&lt;/p&gt;
&lt;p&gt;Repositories are processed in alphabetical order sorted by paths
listed in &lt;code&gt;PROJECT_LIST&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="examples"&gt;&lt;a class="toclink" href="#examples"&gt;Examples&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="refreshing-your-memory"&gt;&lt;a class="toclink" href="#refreshing-your-memory"&gt;Refreshing your memory&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./git-projects.sh log --oneline -3 --no-decorate

HomeLibraryCatalog
b5808f6 Always check the db before showing first run page
72d2481 Remove /quit route
75c707b Clean up destructors &lt;span class="k"&gt;for&lt;/span&gt; WebUI and CatalogueDB

OpenShiftApp
b260276 Deploy from GitHub
05e0206 Deploy from GitHub
54e5cf1 Deploy from GitHub

server_common
bc33836 Indentation rule &lt;span class="k"&gt;for&lt;/span&gt; Makefiles
72fb92a Use proper syntax &lt;span class="k"&gt;for&lt;/span&gt; TODO in GitHub Flavored Markdown
a24e4f2 More familiar Home and Backspace behavior
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="view-latest-tag-if-any"&gt;&lt;a class="toclink" href="#view-latest-tag-if-any"&gt;View latest tag (if any)&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./git-projects.sh describe --tags --always

HomeLibraryCatalog
v0.1.0-71-gb5808f6

OpenShiftApp
b260276

server_common
bc33836
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="checking-project-status"&gt;&lt;a class="toclink" href="#checking-project-status"&gt;Checking project status&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./git-projects.sh

HomeLibraryCatalog
On branch master
Your branch is up-to-date with &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

nothing to commit, working tree clean

OpenShiftApp
On branch master
Your branch is up-to-date with &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

nothing to commit, working tree clean

server_common
On branch master
Your branch is up-to-date with &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

nothing to commit, working tree clean
&lt;/pre&gt;&lt;/div&gt;</content><category term="bash"></category><category term="script"></category><category term="gist"></category></entry><entry><title>Portable development setup for Python on Windows</title><link href="https://potyarkin.ml/posts/2017/portable-development-setup-for-python-on-windows/" rel="alternate"></link><published>2017-09-20T00:00:00+03:00</published><updated>2017-09-20T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2017-09-20:/posts/2017/portable-development-setup-for-python-on-windows/</id><summary type="html">&lt;h2 id="winpython"&gt;&lt;a class="toclink" href="#winpython"&gt;WinPython&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://winpython.github.io/"&gt;https://winpython.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All-in-one distribution which comes with many difficult-to-build packages
preinstalled. And their ...-Zero version is great for thumb drives!&lt;/p&gt;
&lt;p&gt;Pip works just fine, but installing packages that require C compiler is
always a pain on Windows. May be I should look into conda and see if …&lt;/p&gt;</summary><content type="html">&lt;h2 id="winpython"&gt;&lt;a class="toclink" href="#winpython"&gt;WinPython&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://winpython.github.io/"&gt;https://winpython.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All-in-one distribution which comes with many difficult-to-build packages
preinstalled. And their ...-Zero version is great for thumb drives!&lt;/p&gt;
&lt;p&gt;Pip works just fine, but installing packages that require C compiler is
always a pain on Windows. May be I should look into conda and see if it
offers a portable variant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; there are unofficial binary wheels for most common Python packages
at &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;http://www.lfd.uci.edu/~gohlke/pythonlibs/&lt;/a&gt; The site's hosting is a little
unreliable, so it might take a few trys to fetch a package.&lt;/p&gt;
&lt;h2 id="git-portable"&gt;&lt;a class="toclink" href="#git-portable"&gt;Git Portable&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/download/win"&gt;https://git-scm.com/download/win&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Git for Windows is now recommended by official Git website, and there always
is a portable version.&lt;/p&gt;
&lt;p&gt;This package provides not only Git but also bash and a basic MSYS environment
(coreutils, sed, grep, awk, etc) which make life on Window &lt;em&gt;so much&lt;/em&gt; easier!
Also, it comes with VIM preinstalled, which is a damn good editor and is
preferred by many developers.&lt;/p&gt;
&lt;h2 id="gnu-make"&gt;&lt;a class="toclink" href="#gnu-make"&gt;GNU Make&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.equation.com/servlet/equation.cmd?fa=make"&gt;http://www.equation.com/servlet/equation.cmd?fa=make&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately Git for Windows does not come with GNU make preinstalled, so
we have to download it manually. Great guys at Equation Solution are regularly
building standalone versions of GNU Make for 32-bit and 64-bit Windows.&lt;/p&gt;
&lt;p&gt;Downloaded file has to be placed somewhere in PATH.&lt;/p&gt;
&lt;h2 id="github-with-ssh-keys"&gt;&lt;a class="toclink" href="#github-with-ssh-keys"&gt;GitHub with SSH keys&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://help.github.com/articles/connecting-to-github-with-ssh/"&gt;https://help.github.com/articles/connecting-to-github-with-ssh/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don't know if it is even possible to setup HTTPS authentication without
installing GitHub Desktop, and SSH key authentication works with GitHub
same as everywhere.&lt;/p&gt;
&lt;p&gt;I keep the keys on my laptop and the rest of the environment is on a thumb
drive. That way I can develop anywhere I want, Windows comes as a given (sadly),
and I don't have to worry about keys security, because they are not exposed
to random computers.&lt;/p&gt;
&lt;p&gt;Official documentation recommends using HTTPS just because it's easier for
newcomers (&lt;a href="https://stackoverflow.com/questions/11041729"&gt;https://stackoverflow.com/questions/11041729&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It does not require generating public/private keys and uploading the correct
  one to GitHub&lt;/li&gt;
&lt;li&gt;HTTPS is allowed everywhere and SSH might be blocked by a firewall&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="windows"></category><category term="bookmarks"></category></entry></feed>