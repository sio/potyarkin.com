<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Orange Sun</title><link href="https://potyarkin.ml/" rel="alternate"></link><link href="https://potyarkin.ml/feeds/all.atom.xml" rel="self"></link><id>https://potyarkin.ml/</id><updated>2018-04-01T12:00:00+03:00</updated><entry><title>Unit testing in Power Query M Language</title><link href="https://potyarkin.ml/posts/2018/unit-testing-in-power-query-m-language/" rel="alternate"></link><published>2018-04-01T12:00:00+03:00</published><updated>2018-04-01T12:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-04-01:/posts/2018/unit-testing-in-power-query-m-language/</id><summary type="html">&lt;p&gt;As your code base gets bigger,
&lt;a href="https://en.wikipedia.org/wiki/Test_automation"&gt;test automation&lt;/a&gt; becomes more
and more important. This applies to any development platform, including Power
Query / PowerBI. If you reuse your code and improve some low level function
later, test automation allows you to make sure your changes did not break
anything that depends …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As your code base gets bigger,
&lt;a href="https://en.wikipedia.org/wiki/Test_automation"&gt;test automation&lt;/a&gt; becomes more
and more important. This applies to any development platform, including Power
Query / PowerBI. If you reuse your code and improve some low level function
later, test automation allows you to make sure your changes did not break
anything that depends on the part of code you've just modified.&lt;/p&gt;
&lt;p&gt;As far as I know, there are no tools that allow us to perform automated testing
of functions and queries written in Power Query M language. That's why I've
built a simple unit testing framework into &lt;a href="https://github.com/sio/LibPQ"&gt;LibPQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;LibPQ UnitTest framework&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/sio/LibPQ/blob/master/Docs/UnitTesting.md"&gt;UnitTest&lt;/a&gt; framework is modelled after the only other unit testing tool I
have experience with: Python's
&lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt;. It offers the
following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test suites to arbitrarily group individual test cases&lt;/li&gt;
&lt;li&gt;Assertion functions to test simple statements&lt;/li&gt;
&lt;li&gt;Subtests to execute the same test on a sequence of sample inputs&lt;/li&gt;
&lt;li&gt;Test runner and test discovery functions to execute your test suites&lt;/li&gt;
&lt;li&gt;Test results table that can be analyzed either manually or with any
  automation tool you create&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inner workings of the test framework are described in the
&lt;a href="https://github.com/sio/LibPQ/blob/master/Docs/UnitTesting.md"&gt;documentation&lt;/a&gt;. This article will demonstrate how it works.&lt;/p&gt;
&lt;h2&gt;UnitTest demo&lt;/h2&gt;
&lt;p&gt;All modules described here are imported with LibPQ, so a basic familiarity with the library is assumed (&lt;a href="https://github.com/sio/LibPQ/blob/master/README.md"&gt;readme&lt;/a&gt;, &lt;a href="https://potyarkin.ml/posts/2018/getting-started-with-libpq/"&gt;getting started&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Let's create a basic test suite and save it in the directory listed in &lt;code&gt;LibPQPath&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* DemoTests.pq - sample test suite */&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;Assert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LibPQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UnitTest.Assert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;testFirstTest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;testAlwaysFail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;LibPQ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TestSuite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The test suite is a record (note the square brackets surrounding the code) that
contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two test cases (values prefixed with "test")&lt;ul&gt;
&lt;li&gt;The first test will pass because 6 times 7 is 42&lt;/li&gt;
&lt;li&gt;The second test will always fail because "foo" and "bar" are different
strings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;And one related value: &lt;code&gt;Assert&lt;/code&gt; is a helper for building test functions. Its
  use is not required, but makes writing tests much easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last line contains metadata that marks the test suite as such and allows
test discovery tools to distinguish it from just another record.&lt;/p&gt;
&lt;p&gt;Here is what &lt;a href="https://github.com/sio/LibPQ/blob/master/Modules/UnitTest.Discover.pq"&gt;UnitTest.Discover&lt;/a&gt; function will do when invoked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search all locally available modules for valid test suites (hence the metadata)&lt;/li&gt;
&lt;li&gt;Execute each located test suite with &lt;a href="https://github.com/sio/LibPQ/blob/master/Modules/UnitTest.Run.pq"&gt;UnitTest.Run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Return the test results as a table, reporting as much data about the failed
  tests as possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://potyarkin.ml/posts/2018/unit-testing-in-power-query-m-language/libpq-unittest-long.png"&gt;&lt;img alt="Test results" src="https://potyarkin.ml/posts/2018/unit-testing-in-power-query-m-language/libpq-unittest-long.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the screenshot above we invoke &lt;a href="https://github.com/sio/LibPQ/blob/master/Modules/UnitTest.Discover.pq"&gt;UnitTest.Discover&lt;/a&gt; with &lt;code&gt;compact_output =
false&lt;/code&gt; but when you'll have dozens of test cases you'll probably prefer default
behavior (group test results by status).&lt;/p&gt;
&lt;h2&gt;More about UnitTest in LibPQ&lt;/h2&gt;
&lt;p&gt;If you liked the idea of unit testing M language code, check out the main
&lt;a href="https://github.com/sio/LibPQ/blob/master/Docs/UnitTesting.md"&gt;UnitTest&lt;/a&gt; documentation and a more extensive &lt;a href="https://github.com/sio/LibPQ/blob/master/Samples/Tests.Sample.pq"&gt;test sample&lt;/a&gt; that makes use of
subtests.&lt;/p&gt;</content><category term="m"></category><category term="power-query"></category><category term="LibPQ"></category></entry><entry><title>Getting started with LibPQ</title><link href="https://potyarkin.ml/posts/2018/getting-started-with-libpq/" rel="alternate"></link><published>2018-04-01T00:00:00+03:00</published><updated>2018-04-01T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-04-01:/posts/2018/getting-started-with-libpq/</id><summary type="html">&lt;p&gt;This is a step by step guide to getting started with &lt;a href="https://potyarkin.ml/posts/2018/expanding-power-query-standard-library-introducing-libpq/"&gt;LibPQ&lt;/a&gt;, an illustrated
version of &lt;a href="https://github.com/sio/LibPQ/blob/master/README.md#installation-and-usage"&gt;"Installation and usage"&lt;/a&gt; section of the official
documentation.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;h3&gt;LibPQ source code&lt;/h3&gt;
&lt;p&gt;The source code of the library has to be present in each workbook that uses it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new blank query: &lt;code&gt;Data …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is a step by step guide to getting started with &lt;a href="https://potyarkin.ml/posts/2018/expanding-power-query-standard-library-introducing-libpq/"&gt;LibPQ&lt;/a&gt;, an illustrated
version of &lt;a href="https://github.com/sio/LibPQ/blob/master/README.md#installation-and-usage"&gt;"Installation and usage"&lt;/a&gt; section of the official
documentation.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;h3&gt;LibPQ source code&lt;/h3&gt;
&lt;p&gt;The source code of the library has to be present in each workbook that uses it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new blank query: &lt;code&gt;Data &amp;gt; Get &amp;amp; Transform &amp;gt; From Other Sources &amp;gt;
  Blank Query&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go to "Advanced editor" and replace the query code with the contents of
  &lt;a href="https://potyarkin.ml/posts/2018/expanding-power-query-standard-library-introducing-libpq/"&gt;&lt;code&gt;LibPQ.pq&lt;/code&gt;&lt;/a&gt; (switch to "Raw" view to make selecting easier)&lt;/li&gt;
&lt;li&gt;Save new query under the name &lt;code&gt;LibPQ&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-main-module.png"&gt;&lt;img alt="Main module of LibPQ" src="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-main-module.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Specifying modules location&lt;/h3&gt;
&lt;p&gt;After the previous step LibPQ doesn't know yet where it should get the modules'
source code from. You can specify an unlimited number of local and web locations
where the modules are saved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new blank query and name it &lt;code&gt;LibPQPath&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy the contents of &lt;a href="https://github.com/sio/LibPQ/blob/master/LibPQPath-sample.pq"&gt;LibPQPath-sample.pq&lt;/a&gt; and modify it in Advanced editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-path-editor.png"&gt;&lt;img alt="LibPQ-Path" src="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-path-editor.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LibPQ will search for your modules first in local directories (in order they
are listed), then in web locations. If the module is found, no further
locations are checked.&lt;/p&gt;
&lt;p&gt;It helps with the name collisions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let's say you have a module &lt;code&gt;FavoritePets.pq&lt;/code&gt; stored in your module
  collection at &lt;code&gt;http://yoursite.com/PowerQueryModules/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;At the same time you use some modules from a friend's module collection
  at &lt;code&gt;http://friendname.com/PowerQueryModules/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If your friend adds a module with the same name to their collection, all
  you need to do to ignore it is to make sure that your collection address
  is higher in the &lt;code&gt;LibPQPath&lt;/code&gt; than your friend's.&lt;/li&gt;
&lt;li&gt;That works both ways: you and your friend can continue sharing your
  module collections while using personal modules with colliding names
  without any problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Reusable template&lt;/h3&gt;
&lt;p&gt;It is not necessary to repeat the installation steps every time you want to use LibPQ. You can add LibPQ to an empty workbook and save is as a template for future use.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;h3&gt;Importing existing module&lt;/h3&gt;
&lt;p&gt;Import any available module with &lt;code&gt;LibPQ("ModuleName")&lt;/code&gt; when writing your
queries in Advanced editor. LibPQ will search for the file named
&lt;code&gt;ModuleName.pq&lt;/code&gt; in all locations that you've listed in LibPQPath. If the module
is found, its source code will be evaluated and the result will be returned.&lt;/p&gt;
&lt;p&gt;For example, let's import &lt;code&gt;Date.Parse&lt;/code&gt; from standard LibPQ collection:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-date-parse.png"&gt;&lt;img alt="Date.Parse" src="https://potyarkin.ml/posts/2018/getting-started-with-libpq/libpq-date-parse.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That works because &lt;code&gt;LibPQPath&lt;/code&gt; contains reference to
&lt;code&gt;https://raw.githubusercontent.com/sio/LibPQ/master/Modules/&lt;/code&gt;, where the source
code for &lt;code&gt;Date.Parse.pq&lt;/code&gt; is located.&lt;/p&gt;
&lt;h3&gt;Creating a new module&lt;/h3&gt;
&lt;p&gt;You can save any reusable Power Query function or query to be imported by LibPQ
later:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy the code of that module to any text editor (I recommend Notepad++) and
  save it with &lt;code&gt;*.pq&lt;/code&gt; extension&lt;/li&gt;
&lt;li&gt;Place the module into any location listed in &lt;code&gt;LibPQPath&lt;/code&gt; and it will become
  available for importing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any futher questions about LibPQ please create an &lt;a href="https://github.com/sio/LibPQ/issues"&gt;issue&lt;/a&gt; on GitHub
or contact me via &lt;a href="mailto:sio.wtf@gmail.com"&gt;e-mail&lt;/a&gt;.&lt;/p&gt;</content><category term="m"></category><category term="power-query"></category><category term="LibPQ"></category></entry><entry><title>Roads and Bridges - sustaining modern digital infrastructure</title><link href="https://potyarkin.ml/posts/2018/roads-and-bridges-sustaining-modern-digital-infrastructure/" rel="alternate"></link><published>2018-02-23T00:00:00+03:00</published><updated>2018-02-23T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-02-23:/posts/2018/roads-and-bridges-sustaining-modern-digital-infrastructure/</id><summary type="html">&lt;p&gt;This week I have stumbled upon a very thorough review of existing problems and
hidden costs of sustaining modern (open source) digital infrastructure. Here it
is: &lt;a href="https://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/"&gt;Roads and Bridges - The Unseen Labor Behind Our Digital
Infrastructure&lt;/a&gt; by &lt;em&gt;Nadia Eghbal&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The essay was created with support from the Ford Foundation and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week I have stumbled upon a very thorough review of existing problems and
hidden costs of sustaining modern (open source) digital infrastructure. Here it
is: &lt;a href="https://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/"&gt;Roads and Bridges - The Unseen Labor Behind Our Digital
Infrastructure&lt;/a&gt; by &lt;em&gt;Nadia Eghbal&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The essay was created with support from the Ford Foundation and is published on
their website under a Creative Commons license. Unfortunately, that website
denies access to users from certain countries (like Russia), so here is a
&lt;a href="https://potyarkin.ml/posts/2018/roads-and-bridges-sustaining-modern-digital-infrastructure/roads-and-bridges.pdf"&gt;mirror of PDF version&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The author discusses important and often overlooked topics of why open source
software gets built and by whom, of who pays the costs of building and
maintaining that software and of how to ensure that the software we all rely
upon continues to be &lt;em&gt;reliable&lt;/em&gt;. The essay poses more questions than it
answers, but I still consider it the best read on the topic of sustaining open
source development.&lt;/p&gt;
&lt;p&gt;In my case Nadia Eghbal was "preaching to the converted" so this post is me
trying to spread her word. Please read her essay and please do not take open
source software for granted. The costs of building it are just payed by others,
may be you can figure out how to help them?&lt;/p&gt;</content><category term="bookmarks"></category><category term="opensource"></category></entry><entry><title>Expanding Power Query standard library - introducing LibPQ</title><link href="https://potyarkin.ml/posts/2018/expanding-power-query-standard-library-introducing-libpq/" rel="alternate"></link><published>2018-01-03T00:00:00+03:00</published><updated>2018-01-03T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2018-01-03:/posts/2018/expanding-power-query-standard-library-introducing-libpq/</id><summary type="html">&lt;p&gt;Power Query formula language (also known as M language) is a very capable yet
not very flexible tool. It lacks some features taken for granted by developers
who are used to other programming languages such as compatibility with version
control systems, extensibility by third-party libraries, etc.&lt;/p&gt;
&lt;p&gt;That is why I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Power Query formula language (also known as M language) is a very capable yet
not very flexible tool. It lacks some features taken for granted by developers
who are used to other programming languages such as compatibility with version
control systems, extensibility by third-party libraries, etc.&lt;/p&gt;
&lt;p&gt;That is why I have started &lt;strong&gt;&lt;a href="https://github.com/sio/LibPQ"&gt;LibPQ&lt;/a&gt;&lt;/strong&gt; - an open-source M language library
meant to expand the standard library and to make it easier for others to do so.
Its main features are:&lt;/p&gt;
&lt;h3&gt;Importing source code from plain text files located on disk or on the web&lt;/h3&gt;
&lt;p&gt;LibPQ stores its modules as plain text files with &lt;code&gt;*.pq&lt;/code&gt; extension.  Detaching
source code from the workbooks that execute it has a lot of advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The source code can be managed by version control system such as git&lt;/li&gt;
&lt;li&gt;Multiple workbooks referring to the same module will always use the same
  (latest) code&lt;/li&gt;
&lt;li&gt;It encourages splitting your code into smaller reusable units&lt;/li&gt;
&lt;li&gt;You can edit the source code with any editor you like (autocompletion and
  syntax highlighting are nice features even though Power Query's Advanced
  Editor does not have them)&lt;/li&gt;
&lt;li&gt;Sharing your code and collaborating becomes much easier&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Supporting several import locations ordered by priority&lt;/h3&gt;
&lt;p&gt;LibPQ does not dictate where you store your source code. Inspired by Python's
&lt;a href="https://docs.python.org/3/library/sys.html#sys.path"&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; it enables specifying unlimited number of local and/or
remote sources (ordered by priority). When importing a module, LibPQ will check
these sources one by one until the required module is found.&lt;/p&gt;
&lt;h3&gt;Unit testing framework&lt;/h3&gt;
&lt;p&gt;Having source code detached from the workbooks encourages you to improve and
refactor existing modules. To make sure you do not introduce regressions you
should cover your code with unit tests.&lt;/p&gt;
&lt;p&gt;There are no unit testing tools in standard library, but LibPQ offers a basic
unit testing framework that supports test discovery, grouping tests into test
suites and comes with a bunch of handy assertion functions. To learn more read
this &lt;a href="https://github.com/sio/LibPQ/blob/master/Docs/UnitTesting.md"&gt;help page&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;A collection of general purpose functions and queries&lt;/h3&gt;
&lt;p&gt;And last, LibPQ contains some general purpose modules that you might find
useful. If not - go write some new ones, you have the tools now!&lt;/p&gt;
&lt;p&gt;LibPQ is built in such way that you do not need me (or anyone else) to approve
of your work.  Save your code to any convenient location, and LibPQ will help
you to import it into your workbooks. You can even keep your modules private,
no pressure here. Have fun and enjoy your coding!&lt;/p&gt;</content><category term="m"></category><category term="excel"></category><category term="power-query"></category><category term="LibPQ"></category></entry><entry><title>Loops in Power Query M language</title><link href="https://potyarkin.ml/posts/2017/loops-in-power-query-m-language/" rel="alternate"></link><published>2017-10-31T00:00:00+03:00</published><updated>2017-10-31T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2017-10-31:/posts/2017/loops-in-power-query-m-language/</id><summary type="html">&lt;p&gt;Power Query Formula Language (also known as M language) is sometimes difficult
to get your head around. This article explains how someone familiar with loops
in other programming languages can approach the same concept in M language.&lt;/p&gt;
&lt;p&gt;First of all let's look at the &lt;a href="https://msdn.microsoft.com/en-us/library/mt211003.aspx"&gt;definition&lt;/a&gt; given by Microsoft:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Power …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Power Query Formula Language (also known as M language) is sometimes difficult
to get your head around. This article explains how someone familiar with loops
in other programming languages can approach the same concept in M language.&lt;/p&gt;
&lt;p&gt;First of all let's look at the &lt;a href="https://msdn.microsoft.com/en-us/library/mt211003.aspx"&gt;definition&lt;/a&gt; given by Microsoft:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Power Query M formula language is optimized for building highly flexible
data mashup queries. It's a &lt;strong&gt;functional&lt;/strong&gt;, case sensitive language similar
to F#, which can be used with Power BI Desktop, Power Query in Excel, and Get
&amp;amp; Transform in Excel 2016.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;"Functional" is the key word&lt;/h2&gt;
&lt;p&gt;Understanding (and accepting) that M is entirely different from most common
programming languages has helped me as much as (maybe even more than) the
exhaustive reference at MSDN. Functional language implies declarative
programming paradigm: you describe &lt;em&gt;what&lt;/em&gt; you want the computer to do instead
of telling &lt;em&gt;how&lt;/em&gt; to do it. If you're familiar with LISP or Erlang or Haskell, M
might not look so foreign to you.&lt;/p&gt;
&lt;p&gt;The code in M is not an explicit sequence of steps that will always be executed
in the same order, it is just a bunch of ground rules that allow the computer
to arrive to the solution. You can check that the order of lines within the
&lt;code&gt;let&lt;/code&gt; statement doesn't matter: as long as all necessary intermediate steps are
described, Power Query will produce the same result even if you rearrange them
randomly.&lt;/p&gt;
&lt;p&gt;And that is the reason you don't get familiar control flow statements. &lt;em&gt;If&lt;/em&gt; is
kinda there, but it has its own quirks too. Loops are out of the question,
unless you somehow manage to implement the function that does the looping for
you. But...&lt;/p&gt;
&lt;p&gt;There already is such a function! It is &lt;code&gt;List.Generate&lt;/code&gt;!&lt;/p&gt;
&lt;h2&gt;List.Generate&lt;/h2&gt;
&lt;p&gt;This function takes 3 or 4 parameters, all of them functions.  (You should
always treat the &lt;code&gt;each&lt;/code&gt; statement as a function &lt;a href="https://msdn.microsoft.com/en-us/library/mt185361.aspx"&gt;because it is&lt;/a&gt; a shortcut
for function definition.)&lt;/p&gt;
&lt;p&gt;The parameters are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;: a function that takes zero arguments and returns the first loop
  item.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;condition&lt;/strong&gt;: a function that takes one argument (loop item) and returns
  boolean value. If this function returns &lt;code&gt;false&lt;/code&gt; the iteration stops,
  otherwise the loop item is added to the list of results. This function will
  be called at the end of each iteration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;next&lt;/strong&gt;: a function that takes one argument (loop item) and returns the next
  loop item. This is the worker body of the loop. Be careful to return the next
  item as the same data type with the same structure, because the returned
  value will be fed to &lt;code&gt;condition()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt; functions later. This
  function will be called at the beginning of each iteration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;transform&lt;/strong&gt;: optional argument. A function that takes one argument - the
  item from the list of results and transforms it into something else.  This
  function gets called once per each item in the list of results, and the list
  of values it returns becomes the return value of &lt;code&gt;List.Generate&lt;/code&gt;. If
  &lt;code&gt;transform()&lt;/code&gt; function is not specified, &lt;code&gt;List.Generate&lt;/code&gt; will return the list
  of items at the moment when &lt;code&gt;condition()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;List.Generate&lt;/code&gt; might be easier to understand with the following pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;A simple example&lt;/h2&gt;
&lt;p&gt;We will generate a table of data points for plotting a parabola. Internally we
will be storing each item as the record with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields.  After that we
will transform that data into a Power Query table for output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let
    data = List.Generate(
        () =&amp;gt; [x=-10, y=100],
        each [x]&amp;lt;=10,
        each [x=[x]+1, y=x*x]
    ),
    output = Table.FromRecords(data)
in output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example &lt;code&gt;start()&lt;/code&gt; is an anonymous function that always returns the
first data point, &lt;code&gt;condition()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt; are also functions even though
they are written using &lt;code&gt;each&lt;/code&gt; shortcut. There is no &lt;code&gt;transform()&lt;/code&gt; function
because it is an optional parameter.&lt;/p&gt;
&lt;h2&gt;An example from real world&lt;/h2&gt;
&lt;p&gt;In the real world you will not need the &lt;code&gt;List.Generate&lt;/code&gt; magic for such simple
tasks, but you will still need it. Here is how I've used it recently.&lt;/p&gt;
&lt;p&gt;Assume you have a list of tables that contain the data in the same format but
for different time periods or for different locations. You have a separate list
of locations (in the correct order), but each individual table does not contain
that information. That's why combining all these tables into one would create a
mess: you have to know which row comes from what table.&lt;/p&gt;
&lt;p&gt;This can be done with &lt;code&gt;List.Generate&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NamedTables = List.Generate(
    () =&amp;gt; [i=-1, table=#table({},{})],  // initialize loop variables
    each [i] &amp;lt; List.Count(Tables),
    each [
        i=[i]+1,
        table=Table.AddColumn(Tables{i}, &amp;quot;TableName&amp;quot;, each Names{i})
    ],
    each [table]
),
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code snippet assumes you have the list of tables in the &lt;code&gt;Tables&lt;/code&gt; variable
and the list of their respective names in the &lt;code&gt;Names&lt;/code&gt; variable. The loop starts
with index of -1 and an empty table, and adds a "TableName" column to each of
the tables. After this modification the tables can be safely combined with
&lt;code&gt;Table.Combine(NamedTables)&lt;/code&gt; - no data loss will occur.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;List.Generate&lt;/code&gt; should be considered a last-ditch attempt to looping. M
has dedicated iterative functions for most common looping tasks, so please
check the standard library reference before creating such C-style loops
manually. They are rather hard to read, and readability counts!&lt;/p&gt;
&lt;p&gt;I hope this article will help you to understand the Power Query Formula
Language a little more. It is a powerful tool and even though it is not
perfect, I hope you will find a lot of uses for it in your data crunching
tasks.&lt;/p&gt;
&lt;h2&gt;An afterthought&lt;/h2&gt;
&lt;p&gt;Also, please keep in mind that the dot symbol in &lt;code&gt;List.Generate&lt;/code&gt; does not have
the same meaning as in other languages either. There are no object methods in
M, and there are no namespaces, so the dot is just another character without
any special meaning.  It could have been a dash or an underscore - it wouldn't
have mattered.&lt;/p&gt;</content><category term="m"></category><category term="excel"></category><category term="power-query"></category></entry><entry><title>Temporary virtual environment for Python</title><link href="https://potyarkin.ml/posts/2017/temporary-virtual-environment-for-python/" rel="alternate"></link><published>2017-10-05T16:50:00+03:00</published><updated>2017-10-05T16:50:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2017-10-05:/posts/2017/temporary-virtual-environment-for-python/</id><summary type="html">&lt;p&gt;Using Python on Windows does not come as naturally as on Unix-like systems, so
any help is appreciated.&lt;/p&gt;
&lt;p&gt;I wrote a batch script to automate creation, setup and deletion of Python virtual
environment. This can come in handy when you want to test something in a clean env,
or to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Using Python on Windows does not come as naturally as on Unix-like systems, so
any help is appreciated.&lt;/p&gt;
&lt;p&gt;I wrote a batch script to automate creation, setup and deletion of Python virtual
environment. This can come in handy when you want to test something in a clean env,
or to play with &lt;code&gt;pip install&lt;/code&gt; and get acquainted with a new package from PyPI.&lt;/p&gt;
&lt;h2&gt;venv-temp.bat&lt;/h2&gt;
&lt;p&gt;You can download the script from
&lt;a href="https://gist.github.com/sio/fbc46ae41607b206ce9099dc8485df34"&gt;https://gist.github.com/sio/...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code is licensed under a permissive opensource license (Apache License,
Version 2.0) so feel free to use it for your hobby and work projects.&lt;/p&gt;
&lt;p&gt;Report any bugs, ideas, feature requests via GitHub issues/comments -
all feedback is welcome!&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Downloaded script does not require any installation.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;python&lt;/code&gt; is not available from your &lt;code&gt;%PATH%&lt;/code&gt;, you have to specify the location
of &lt;code&gt;python.exe&lt;/code&gt; in the script (change the value of &lt;code&gt;PYTHON&lt;/code&gt; variable).&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Launch the script from &lt;code&gt;cmd.exe&lt;/code&gt; to read all error output (if any) or by
double-clicking if you're confident it works on your system.&lt;/p&gt;
&lt;p&gt;After you're done experimenting and are ready to discard the venv, just end shell
session with &lt;code&gt;exit&lt;/code&gt; - the script will take care of cleanup.&lt;/p&gt;
&lt;p&gt;If you close the
terminal window without typing &lt;code&gt;exit&lt;/code&gt;, the script will be terminated before it
performs cleanup. This has no harmful consequences except taking 20-50MB of disk
space. Old venv directory will be purged before reusing, so no changes you've
made will affect the environment you'll get next time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you have no internet connection, the script remains usable, but &lt;code&gt;pip&lt;/code&gt;
will print a lot of error messages while trying to update itself. Don't worry, that's ok.&lt;/p&gt;</content><category term="windows"></category><category term="script"></category><category term="gist"></category></entry><entry><title>Execute the same git subcommand in all local repositories</title><link href="https://potyarkin.ml/posts/2017/execute-the-same-git-subcommand-in-all-local-repositories/" rel="alternate"></link><published>2017-10-05T15:40:00+03:00</published><updated>2017-10-05T15:40:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2017-10-05:/posts/2017/execute-the-same-git-subcommand-in-all-local-repositories/</id><summary type="html">&lt;p&gt;If you work with more than one git project simultaneously, you often need to
do the same maintenance tasks in each cloned repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check if there are some changes waiting to be pushed,&lt;/li&gt;
&lt;li&gt;check remote URLs for all repos (e.g. when considering to switch from HTTPS
  authentication with GitHub …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;If you work with more than one git project simultaneously, you often need to
do the same maintenance tasks in each cloned repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check if there are some changes waiting to be pushed,&lt;/li&gt;
&lt;li&gt;check remote URLs for all repos (e.g. when considering to switch from HTTPS
  authentication with GitHub to using SSH keys),&lt;/li&gt;
&lt;li&gt;view last commit messages to refresh your memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doing so with standard tools would involve a lot of &lt;code&gt;cd&lt;/code&gt;-ing, and the
inconvenience would deter you from checking all repos frequently.&lt;/p&gt;
&lt;p&gt;That's why I wrote a simple bash script that helps to &lt;em&gt;automate the boring
stuff&lt;/em&gt;. The script is well-documented, so I won't discuss implementation
details here.&lt;/p&gt;
&lt;h2&gt;git-projects.sh&lt;/h2&gt;
&lt;p&gt;You can download the script from
&lt;a href="https://gist.github.com/sio/227da259cad7bb549c69909ba428884c"&gt;https://gist.github.com/sio/...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code is licensed under a permissive opensource license (Apache License,
Version 2.0) so feel free to use it for your hobby and work projects.&lt;/p&gt;
&lt;p&gt;Report any bugs, ideas, feature requests via GitHub issues/comments -
all feedback is welcome!&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download the script from GitHub, add execution permissions&lt;/li&gt;
&lt;li&gt;List the paths to the local clones of your git repos in a text
  file (one path per line). If you're using relative paths they must
  be valid relative to the location of the script&lt;/li&gt;
&lt;li&gt;Update the value of &lt;code&gt;PROJECT_LIST&lt;/code&gt; variable with the path of the file
  you've just created&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;All command-line parameters are passed on to the &lt;code&gt;git&lt;/code&gt; command.
When the script is launched without parameters, &lt;code&gt;git-projects.sh&lt;/code&gt; checks the
status of each repo.&lt;/p&gt;
&lt;p&gt;Repositories are processed in alphabetical order sorted by paths
listed in &lt;code&gt;PROJECT_LIST&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;h3&gt;Refreshing your memory&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./git-projects.sh log --oneline -3 --no-decorate

HomeLibraryCatalog
b5808f6 Always check the db before showing first run page
72d2481 Remove /quit route
75c707b Clean up destructors &lt;span class="k"&gt;for&lt;/span&gt; WebUI and CatalogueDB

OpenShiftApp
b260276 Deploy from GitHub
05e0206 Deploy from GitHub
54e5cf1 Deploy from GitHub

server_common
bc33836 Indentation rule &lt;span class="k"&gt;for&lt;/span&gt; Makefiles
72fb92a Use proper syntax &lt;span class="k"&gt;for&lt;/span&gt; TODO in GitHub Flavored Markdown
a24e4f2 More familiar Home and Backspace behavior
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;View latest tag (if any)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./git-projects.sh describe --tags --always

HomeLibraryCatalog
v0.1.0-71-gb5808f6

OpenShiftApp
b260276

server_common
bc33836
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Checking project status&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./git-projects.sh

HomeLibraryCatalog
On branch master
Your branch is up-to-date with &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

nothing to commit, working tree clean

OpenShiftApp
On branch master
Your branch is up-to-date with &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

nothing to commit, working tree clean

server_common
On branch master
Your branch is up-to-date with &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

nothing to commit, working tree clean
&lt;/pre&gt;&lt;/div&gt;</content><category term="bash"></category><category term="script"></category><category term="gist"></category></entry><entry><title>Portable development setup for Python on Windows</title><link href="https://potyarkin.ml/posts/2017/portable-development-setup-for-python-on-windows/" rel="alternate"></link><published>2017-09-20T00:00:00+03:00</published><updated>2017-09-20T00:00:00+03:00</updated><author><name>Vitaly Potyarkin</name></author><id>tag:potyarkin.ml,2017-09-20:/posts/2017/portable-development-setup-for-python-on-windows/</id><summary type="html">&lt;h2&gt;WinPython&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://winpython.github.io/"&gt;https://winpython.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All-in-one distribution which comes with many difficult-to-build packages
preinstalled. And their ...-Zero version is great for thumb drives!&lt;/p&gt;
&lt;p&gt;Pip works just fine, but installing packages that require C compiler is
always a pain on Windows. May be I should look into conda and see if …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;WinPython&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://winpython.github.io/"&gt;https://winpython.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All-in-one distribution which comes with many difficult-to-build packages
preinstalled. And their ...-Zero version is great for thumb drives!&lt;/p&gt;
&lt;p&gt;Pip works just fine, but installing packages that require C compiler is
always a pain on Windows. May be I should look into conda and see if it
offers a portable variant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; there are unofficial binary wheels for most common Python packages
at &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;http://www.lfd.uci.edu/~gohlke/pythonlibs/&lt;/a&gt; The site's hosting is a little
unreliable, so it might take a few trys to fetch a package.&lt;/p&gt;
&lt;h2&gt;Git Portable&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/download/win"&gt;https://git-scm.com/download/win&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Git for Windows is now recommended by official Git website, and there always
is a portable version.&lt;/p&gt;
&lt;p&gt;This package provides not only Git but also bash and a basic MSYS environment
(coreutils, sed, grep, awk, etc) which make life on Window &lt;em&gt;so much&lt;/em&gt; easier!
Also, it comes with VIM preinstalled, which is a damn good editor and is
preferred by many developers.&lt;/p&gt;
&lt;h2&gt;GNU Make&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.equation.com/servlet/equation.cmd?fa=make"&gt;http://www.equation.com/servlet/equation.cmd?fa=make&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately Git for Windows does not come with GNU make preinstalled, so
we have to download it manually. Great guys at Equation Solution are regularly
building standalone versions of GNU Make for 32-bit and 64-bit Windows.&lt;/p&gt;
&lt;p&gt;Downloaded file has to be placed somewhere in PATH.&lt;/p&gt;
&lt;h2&gt;GitHub with SSH keys&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://help.github.com/articles/connecting-to-github-with-ssh/"&gt;https://help.github.com/articles/connecting-to-github-with-ssh/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don't know if it is even possible to setup HTTPS authentication without
installing GitHub Desktop, and SSH key authentication works with GitHub
same as everywhere.&lt;/p&gt;
&lt;p&gt;I keep the keys on my laptop and the rest of the environment is on a thumb
drive. That way I can develop anywhere I want, Windows comes as a given (sadly),
and I don't have to worry about keys security, because they are not exposed
to random computers.&lt;/p&gt;
&lt;p&gt;Official documentation recommends using HTTPS just because it's easier for
newcomers (&lt;a href="https://stackoverflow.com/questions/11041729"&gt;https://stackoverflow.com/questions/11041729&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It does not require generating public/private keys and uploading the correct
  one to GitHub&lt;/li&gt;
&lt;li&gt;HTTPS is allowed everywhere and SSH might be blocked by a firewall&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="windows"></category><category term="bookmarks"></category></entry></feed>